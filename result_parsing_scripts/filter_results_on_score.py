import os
import argparse
import json

hash_name_to_threshold_score = {
    'rshash':70, 
    'jshash':82, 
    'elfhash':78,
    'bkdrhash':86,
    #'fnvhash':70,
    #'sdbmhash':70,
    'fnvhash':60,
    'sdbmhash':60,
    'djbhash':70,
    'dekhash':83,
    'aphash':0
}

ROOT = '/home/share/extracted_deb_packages'

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('results', help='the results file to query')
    args = parser.parse_args()
    results_file = args.results
    with open(results_file, 'r') as fd:
        hash_funcs_to_score_to_file = {}
        for i, line in enumerate(fd):
            result = json.loads(line)
            deb_name = result[0]['deb']['deb_name']
            elf_name = result[0]['elf']['elf_name']
            elf_md5 = result[0]['elf']['elf_md5']
            #if 'hash_funcs' in results['analysis_metrics']:
            #if 'analysis_metrics' not in results[1]:
            #    print(results)
            if 'hash_funcs' in result[1]:
                hash_funcs = result[1]['hash_funcs']
                for hash_name, func_name, score in hash_funcs:
                    if score >= hash_name_to_threshold_score[hash_name]:
                        full_file_name = search_file(os.path.join(ROOT, deb_name), elf_name)
                        assert os.path.isfile(full_file_name)
                        print(full_file_name)

def search_file(directory, file_name):
    for r, d, fs in os.walk(directory):
        for f in fs:
            if f == file_name:
                return os.path.join(r, f)
    return None

if __name__ == "__main__":
    main()
