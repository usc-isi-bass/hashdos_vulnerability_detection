import argparse
import json

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('results', help='the results file to query')
    args = parser.parse_args()
    results_file = args.results
    with open(results_file, 'r') as fd:
        hash_funcs_to_score_to_file = {}
        for i, line in enumerate(fd):
            result = json.loads(line)
            deb_name = result[0]['deb']['deb_name']
            elf_name = result[0]['elf']['elf_name']
            elf_md5 = result[0]['elf']['elf_md5']
            #if 'hash_funcs' in results['analysis_metrics']:
            #if 'analysis_metrics' not in results[1]:
            #    print(results)
            if 'hash_funcs' in result[1]:
                hash_funcs = result[1]['hash_funcs']
                for hash_name, func_name, score in hash_funcs:
                    if score < 80 or 'sub' in func_name:
                        continue
                    if hash_name not in hash_funcs_to_score_to_file:
                        hash_funcs_to_score_to_file[hash_name] = {}
                        hash_funcs_to_score_to_file[hash_name][score] = [(func_name, deb_name, elf_name)]
                    else:
                        if score not in hash_funcs_to_score_to_file[hash_name]:
                            hash_funcs_to_score_to_file[hash_name][score] = [(func_name, deb_name, elf_name)]
                        else:
                            hash_funcs_to_score_to_file[hash_name][score].append((func_name, deb_name, elf_name))
        for hash_name in hash_funcs_to_score_to_file:
            score_to_file = hash_funcs_to_score_to_file[hash_name]
            sorted_scores = reversed(sorted(score_to_file.keys()))
            print("HASH: {}".format(hash_name))
            for score in sorted_scores:
                l = score_to_file[score]
                print("\tScore: {}".format(score))
                for func_name, deb_name, elf_name in l:
                    print("\t\t{} {} {}".format(func_name, deb_name, elf_name))

if __name__ == "__main__":
    main()
