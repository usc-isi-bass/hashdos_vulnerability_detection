import argparse
import json
import os
import csv

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('results', help='the results file to query')
    args = parser.parse_args()
    results_file = args.results
    results_csv_file = os.path.basename(results_file) + '.csv'
    with open(results_file, 'r') as fd_read, open(results_csv_file, 'w') as fd_write:
        csv_file_writer = csv.writer(fd_write)
        csv_file_writer.writerow(['deb', 'elf', 'hash', 'caller', 'callsite', 'retsite', 'reads', 'writes', 'seeks'])
        hash_funcs_to_score_to_file = {}
        for i, line in enumerate(fd_read):
            result = json.loads(line)
            deb_name = result[0]['deb']['deb_name']
            elf_name = result[0]['elf']['elf_name']
            elf_md5 = result[0]['elf']['elf_md5']
            #if 'hash_funcs' in results['analysis_metrics']:
            #if 'analysis_metrics' not in results[1]:
            #    print(results)
            if 'mem_hash_deps' in result[1]:
                mem_hash_deps = result[1]['mem_hash_deps']
                for mem_hash_dep in mem_hash_deps:
                    hash_func = mem_hash_dep['hash_func']
                    caller = mem_hash_dep['hash_func_caller']
                    callsite = mem_hash_dep['callsite']
                    retsite = mem_hash_dep['retsite']
                    reads = mem_hash_dep['mem_read_hash_deps']
                    writes = mem_hash_dep['mem_write_hash_deps']
                    seeks = mem_hash_dep['file_seek_hash_deps']
                    #print(deb_name, elf_name, elf_md5, hash_func, caller, callsite, retsite, reads, writes)
                    csv_file_writer.writerow([deb_name, elf_name, hash_func, caller, callsite, retsite, reads, writes, seeks])
if __name__ == "__main__":
    main()
