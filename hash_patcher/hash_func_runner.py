import angr
import claripy

import util.angr_util as angr_util

CONC_BUFF_ADDR = 0x7fffffffffefff5

class HashFuncRunner:
    # TODO Consider using manually crafted SimCCs for the factory.call_state calls. If we try to symex patch code, this automatic setup of the call state may fail

    def __init__(self, elf_file_name, hash_func_addr, proj=None):
        self._elf_file_name = elf_file_name
        self._hash_func_addr = hash_func_addr

        if proj is None:
            self._proj = angr.Project(self._elf_file_name, auto_load_libs=False)
        else:
            self._proj = proj

        self._run_symb_cache = {}

    def eval(self, conc_buf):
        conc_buf_len = len(conc_buf)
        # TODO Make signature sensitive
        call_state, ret_state = self.run_conc_sig1(conc_buf, conc_buf_len)
        ret_reg = angr_util.get_ret_reg(self._proj, ret_state)
        hash_val = ret_state.solver.eval(ret_reg)
        return hash_val

    def run_conc_sig1(self, buf, buf_len):

        call_state = self._proj.factory.call_state(self._hash_func_addr, buf, buf_len, add_options=[angr.options.TRACK_MEMORY_ACTIONS])
        return self.run_conc(call_state)

    def run_conc_sig2(self, buf):

        call_state = self._proj.factory.call_state(self._hash_func_addr, buf, add_options=[angr.options.TRACK_MEMORY_ACTIONS])
        return self.run_conc(call_state)


    def run_conc(self, call_state):
        ret_states = self.run_hash_func(call_state)

        assert len(ret_states) == 1, "We executed the hash func with concrete input, but now we have more than one deadended state? deadeded states: {}".format(ret_states)
        ret_state = ret_states[0]

        return call_state, ret_state


    def run_symb(self, buf_len):
        if buf_len not in self._run_symb_cache:
            symbstr_addr = claripy.BVS(name='buf_addr', size=self._proj.arch.bits)
            call_state = self._proj.factory.call_state(self._hash_func_addr, symbstr_addr, buf_len)
            call_state.add_constraints(symbstr_addr == 0x7fffffffffefff5)
            symbstr = claripy.BVS("str", size=buf_len * 8)
            for i in range(buf_len):
                call_state.add_constraints(symbstr.get_byte(i) != 0)
                call_state.memory.store(symbstr_addr + i, symbstr.get_byte(i))
            call_state.memory.store(symbstr_addr + buf_len, 0)
            ret_states = self.run_hash_func(call_state)
            rets = []
            for state in ret_states:
                rets.append((state, angr_util.get_ret_reg(self._proj, state)))

            self._run_symb_cache[buf_len] = symbstr, rets
        else:
            symbstr, rets = self._run_symb_cache[buf_len]
        return symbstr, rets

    def run_hash_func(self, call_state, n=None):
        simgr = self._proj.factory.simgr(call_state)
        simgr.run(n=n)
        ret_states = []
        for state in simgr.deadended:
            ret_states.append(state)
        return ret_states
