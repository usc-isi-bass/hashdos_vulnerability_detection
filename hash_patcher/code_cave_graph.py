import networkx as nx

class CodeCaveGraph(nx.DiGraph):

    
    def add_code_cave(self, addr, size):
        self.add_node(addr, size=size)
        #print('adding node: 0x{:x}'.format(addr))

        new_code_cave = (addr, size)
        for code_cave_addr in self.nodes:
            code_cave_size = self.nodes[code_cave_addr]['size']
            if addr != code_cave_addr:

                short_jumpable = can_short_jump(new_code_cave, code_cave_addr)
                long_jumpable = can_long_jump(new_code_cave, code_cave_addr)
                if short_jumpable:
                    #print('adding short edge1 0x{:x} --> 0x{:x}'.format(addr, code_cave_addr))
                    self.add_edge(addr, code_cave_addr, jump_type='short', jump_len=2)
                elif long_jumpable:
                    #print('adding long edge2 0x{:x} --> 0x{:x}'.format(addr, code_cave_addr))
                    self.add_edge(addr, code_cave_addr, jump_type='long', jump_len=5)

                old_code_cave = (code_cave_addr, code_cave_size)
                short_jumpable = can_short_jump(old_code_cave, addr)
                long_jumpable = can_long_jump(old_code_cave, addr)
                if short_jumpable:
                    #print('adding short edge3 0x{:x} --> 0x{:x}'.format(addr, code_cave_addr))
                    self.add_edge(code_cave_addr, addr, jump_type='short', jump_len=2)
                elif long_jumpable:
                    #print('adding long edge4 0x{:x} --> 0x{:x}'.format(addr, code_cave_addr))
                    self.add_edge(code_cave_addr, addr, jump_type='long', jump_len=5)

            
def can_short_jump(code_cave_src, dst_addr):
    # Can we jump from the previous code cave to this code cave with a short jump?
    # Reqs: 
    # 1. The previous code cave must be at least two bytes (a short jump is two bytes)
    # 2. The distance from the jump location in the previous code cave, to this code cave must be be between -126 and 129 (inclusive on both ends) (which is the farthest you can short jump)
    #    For a short jump, the jump location of the previous code will be the last two bytes.
    code_cave_src_addr, code_cave_src_size = code_cave_src
    code_cave_src_short_jmp_addr = code_cave_src_addr + code_cave_src_size - 2
    short_jmp_dist = dst_addr - code_cave_src_short_jmp_addr
    short_jumpable = (code_cave_src_size >= 2) and (-0x7e <= short_jmp_dist <= 0x81)
    return short_jumpable

def can_long_jump(code_cave_src, dst_addr):
    # Can we jump from the previous code cave to this code cave with a long jump?
    # Reqs:
    # 1. The previous code cave must be at least five bytes(a long jump is five bytes)
    # 2. The distance from the jump location in the previous code cave, to this code cave must be between -0xfffffffb and 0x100000004 (inclusive on both ends) which is the farthest you can long jump
    #    For a long jump, the jump location of the previous code cave will be the last five bytes
    code_cave_src_addr, code_cave_src_size = code_cave_src
    code_cave_src_long_jmp_addr = code_cave_src_addr + code_cave_src_size - 5
    long_jmp_dist = dst_addr - code_cave_src_long_jmp_addr
    long_jumpable = (code_cave_src_size >= 5) and (-0xfffffffb <= long_jmp_dist <= 0x100000004)
    return long_jumpable
