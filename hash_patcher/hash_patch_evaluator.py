import angr
import claripy
import math

from hash_patcher.hash_func_evaluator import HashFuncEvaluator

class HashPatchEvaluator:

    # TODO Make signature sensitive
    def __init__(self, vuln_elf_file_name, hash_func_addr, vuln_proj=None):
        self._vuln_elf_file_name = vuln_elf_file_name
        self._hash_func_addr = hash_func_addr

        if vuln_proj is None:
            self._vuln_proj = angr.Project(self._vuln_elf_file_name, auto_load_libs=False)
        else:
            self._vuln_proj = vuln_proj
        self._vuln_hash_func_evaluator = HashFuncEvaluator(vuln_elf_file_name, hash_func_addr, proj=self._vuln_proj)

        self._patch_elf_file_name = None
        self._patch_proj = None

    def set_patch(self, patch_elf_file_name):
        self._patch_elf_file_name = patch_elf_file_name
        self._patch_proj = angr.Project(self._patch_elf_file_name, auto_load_libs=False)
        self._patch_hash_func_evaluator = HashFuncEvaluator(patch_elf_file_name, self._hash_func_addr, proj=self._patch_proj)

 
    # Check that for every concrete buffer, the hash value produced by the patched hash value could also have been produced by the original
    def check_hash_vals(self, conc_bufs):
        if not self.check_patch():
            raise Exception("You first have to set a patched binary.")
        patch_irregularities = []
        for conc_buf in conc_bufs:
            patched_hash_val = self._patch_hash_func_evaluator.eval(conc_buf)
            vuln_preimage = self._vuln_hash_func_evaluator.find_preimage(patched_hash_val)
            if vuln_preimage is None:
                irregularity = HashPatchIrregularHashVal(patched_hash_val)
                patch_irregularities.append(irregularity)
        return patch_irregularities


    def check_patch(self):
        return self._patch_elf_file_name and self._patch_proj and self._patch_hash_func_evaluator
        
class HashPatchIrregularity:

    def __init__(self, patch_irregularity_type):
        self.patch_irregularity_type = patch_irregularity_type

class HashPatchIrregularHashVal(HashPatchIrregularity):

    def __init__(self, hash_val):
        super().__init__('irregular_hash_val')
        self.hash_val = hash_val

    def __str__(self):
        return "<HashPatchIrregularHashVal {}>".format(self.hash_val)

