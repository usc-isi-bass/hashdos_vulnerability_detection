import os
import angr
import shutil
import logging
from sortedcontainers import SortedDict
import bisect
import stat

l = logging.getLogger(name=__name__)

class PatchWriter(object):

    def __init__(self, proj):
        self._proj = proj
        self._patches = SortedDict()

    # Adds the patch bytes to patch addr.
    # It makes sure that the patch does not overlap with any of the patches already inserted
    def add_patch(self, patch_addr, patch_bytes):
        patch_size = len(patch_bytes)
        if patch_addr in self._patches:
            raise Exception("A patch is already inserted at addr: {}".format(patch_addr))

        patch_addrs = self._patches.keys()
        if len(patch_addrs) > 0:
            insertion_point = bisect.bisect(patch_addrs, patch_addr)
            if insertion_point > 0:
                left_addr = patch_addrs[insertion_point - 1]
                assert left_addr <= patch_addr
                left_size = len(self._patches[left_addr])
                if left_addr + left_size > patch_addr:
                    raise Exception("Existing patch at addr: 0x{:x} of size {} overlaps with inserting patch at addr: 0x{:x}".format(left_addr, left_size, patch_addr))
            if insertion_point < len(patch_addrs):
                right_addr = patch_addrs[insertion_point]
                assert right_addr > patch_addr
                if patch_addr + patch_size > right_addr:
                    raise Exception("Inserting patch at addr: 0x{:x} of size {} overlaps with existing patch at addr: 0x{:x}".format(patch_addr, patch_size, right_addr))
        
        self._patches[patch_addr] = patch_bytes

    def write_patches(self, patched_elf_name):
        if len(self._patches) > 0:
            patched_file = patched_elf_name
            if os.path.exists(patched_file):
                l.debug("Patched file already exists, deleting...")
                os.remove(patched_file)
            shutil.copyfile(self._proj.filename, patched_file)
            for patch_addr in self._patches:
                patch_bytes = self._patches[patch_addr]
                with open(patched_file, 'rb+') as fd:
                    patch_offset = self._proj.loader.main_object.addr_to_offset(patch_addr)
                    fd.seek(patch_offset)
                    print(patch_bytes)
                    fd.write(patch_bytes)
            os.chmod(patched_file, stat.S_IWUSR | stat.S_IRUSR | stat.S_IXUSR)
