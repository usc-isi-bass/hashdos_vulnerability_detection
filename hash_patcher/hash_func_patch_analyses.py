import angr
import claripy
import networkx as nx
import logging
import ipdb
import pickle
import base64
import pyvex

from hash_patcher.interfunc_code_cave_miner import InterFuncCodeCaveMiner

l = logging.getLogger(name=__name__)
l.setLevel('DEBUG')

# We just want to extract the capstone and VEX code of the hash function
def analyze(elf_file, get_hash_funcs):
    result_dict = {}
    result_dict['analysis_metrics'] = {}
    result_dict['analysis_metrics']['hit'] = False

    try:
        proj = angr.Project(elf_file, auto_load_libs=False)
        cfg_fast = proj.analyses.CFGFast()
        ifccm = InterFuncCodeCaveMiner(elf_file)
        result_dict['patchability'] = ifccm._extract_metrics()
        for hash_func in get_hash_funcs(proj, cfg_fast, result_dict):
			# All metrics we want are added by get_hash_funcs
            pass
        result_dict['analysis_metrics']['hit'] = True
    except Exception as e:
        raise e
        l.debug("Exception: {}".format(str(e)))
        add_error(result_dict, str(e))
    return result_dict

def add_error(result_dict, err_msg):
    if 'err' in result_dict:
        result_dict['err'].append(err_msg)
    else:
        result_dict['err'] = [err_msg]

# Creates a label for a function name@address
def label_func(func):
    return "{}@{}".format(func.name, fmt_addr(func.addr))

def fmt_addr(addr):
    return "0x{:x}".format(addr)

