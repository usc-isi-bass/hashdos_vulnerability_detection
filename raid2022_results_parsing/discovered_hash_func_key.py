class DiscoveredHashFuncKey:

    def __init__(self, analysis_target, discovered_hash_func):
        self.file_md5 = analysis_target.file_md5
        self.func_addr = discovered_hash_func.func_addr
        self.hash_alg = discovered_hash_func.hash_func_name

    def __str__(self):
        return "<alg: {} md5: {} addr: 0x{:x}>".format(self.hash_alg, self.file_md5, self.func_addr)

    def __hash__(self):
        return hash((self.file_md5, self.func_addr, self.hash_alg))

    def __eq__(self, o):
        if not isinstance(o, DiscoveredHashFuncKey):
            return False

        return self.file_md5 == o.file_md5 and self.func_addr == o.func_addr, self.hash_alg == o.hash_alg

    def __lt__(self, o):
        assert isinstance(o, DiscoveredHashFuncKey)
        if self.hash_alg != o.hash_alg:
            return self.hash_alg < o.hash_alg
        if self.file_md5 != o.file_md5:
            return self.file_md5 < o.file_md5
        if self.func_addr != o.func_addr:
            return self.func_addr < o.func_addr

        assert self.hash_alg == o.hash_alg and self.file_md5 == o.file_md5 and self.func_addr == o.func_addr
        return False

class GTHashFuncKey(DiscoveredHashFuncKey):
    def __init__(self, file_md5, func_addr, hash_alg):
        self.file_md5 = file_md5
        self.func_addr = func_addr
        self.hash_alg = hash_alg

