import csv

from discovered_hash_func_key import GTHashFuncKey
import parsing


csv_field_names = ['path', 'file', 'func_name', 'func_addr', 'hash_alg', 'true_positive', 'false_positive', 'src_file', 'src_file', 'line_nr', 'comments', 'bin_md5']

def get_ground_truth_set(groundtruth_file):
    with open(groundtruth_file, 'r') as fd:
        csv_reader = csv.DictReader(fd, fieldnames=csv_field_names)
        ground_truth_set = {}
        for row in csv_reader:
            path = row['path']
            file_name = row['file']
            func_name = row['func_name']
            func_addr = int(row['func_addr'])
            hash_alg = row['hash_alg'] + 'hash'
            true_positive = row['true_positive'] == "TRUE"
            false_positive = row['false_positive'] == "TRUE"
            src_file = row['src_file']
            line_nr = row['line_nr']
            comments = row['comments']
            md5 = row['bin_md5']
            #print(path, file_name, func_name, func_addr, hash_alg, true_positive, false_positive, src_file, line_nr, comments)

            hash_func_key = GTHashFuncKey(md5, func_addr, hash_alg)
            ground_truth_set[hash_func_key] = (path, func_name, func_addr, md5)

        return ground_truth_set

def extract_ground_truth_hash_algs(ground_truth_set):
    ground_truth_hash_algs = set()
    for gthf_key, _ in ground_truth_set.items():
        ground_truth_hash_algs.add(gthf_key.hash_alg)
    return ground_truth_hash_algs

def extract_ground_truth_md5s(ground_truth_set):
    ground_truth_md5s = set()
    for gthf_key, (path, func_name, func_addr, md5) in ground_truth_set.items():
        assert gthf_key.file_md5 == md5
        ground_truth_md5s.add(gthf_key.file_md5)
    return ground_truth_md5s



def print_gthf_key_to_gthfs(gthf_key_to_gthfs, title, summaries_only, md5_to_file_names, hash_algs):
    hash_alg_to_gthfs = parsing.group_by_hash_alg(gthf_key_to_gthfs, hash_algs)
    print("{}: {}".format(title, sum(len(gthf_key_to_gthfs) for gthf_key_to_gthfs in hash_alg_to_gthfs.values())))
    for hash_alg in sorted(hash_algs):
        gthf_key_to_gthfs = hash_alg_to_gthfs[hash_alg]
        print("    {}: {}".format(hash_alg, len(gthf_key_to_gthfs)))
        if not summaries_only:
            for i, gthf_key in enumerate(sorted(gthf_key_to_gthfs)):
                gthf = gthf_key_to_gthfs[gthf_key] 
                md5 = gthf_key.file_md5
                file_names = list(sorted(md5_to_file_names[md5]))
                if len(file_names) == 1:
                    file_names = file_names[0]
                func_addr = gthf_key.func_addr
                assert hash_alg == gthf_key.hash_alg
                gthf_func_addr = gthf[2]
                gthf_func_name = gthf[1]
                assert gthf_func_addr == func_addr
                print("        {:4}: {}@0x{:x} in [{}] ({}) ({})".format(i + 1, gthf_func_name, func_addr, file_names, md5, hash_alg))
