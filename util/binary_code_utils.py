import struct
import nose

NOP = b'\x90'
INT3 = b'\xcc'



XOR_RAX_RAX = b"\x48\x31\xc0"
XOR_RBX_RBX = b"\x48\x31\xdb"
XOR_RCX_RCX = b"\x48\x31\xc9"
XOR_RDX_RDX = b"\x48\x31\xd2"
XOR_RSI_RSI = b"\x48\x31\xf6"
XOR_RDI_RDI = b"\x48\x31\xff"
XOR_R8_R8 = b"\x4d\x31\xc0"
XOR_R9_R9 = b"\x4d\x31\xc9"
XOR_R10_R10 = b"\x4d\x31\xd2"
XOR_R11_R11 = b"\x4d\x31\xdb"
XOR_R12_R12 = b"\x4d\x31\xe4"
XOR_R13_R13 = b"\x4d\x31\xed"
XOR_R14_R14 = b"\x4d\x31\xf6"
XOR_R15_R15 = b"\x4d\x31\xff"


XOR_RDI_RDI =  b"\x48\x31\xFF" 
DEC_RDI = b"\x48\xFF\xCF"
SHR_RDI_1 = b"\x48\xd1\xef"

XOR_RSI_RSI =  b"\x48\x31\xF6" 
DEC_RSI = b"\x48\xff\xce"
SHR_RSI_1 = b"\x48\xd1\xee"

XOR_ESI_ESI = b"\x31\xf6"
DEC_ESI = b"\xff\xce"
SHR_ESI_1 = b"\xd1\xee" # For a logical shift (SHR), the right is filled with zeroes. Doing XOR, DEC, SHR should create the maximum (signed) int?

XOR_RDX_RDX = b"\x48\x31\xd2"
DEC_RDX = b"\x48\xff\xca"
SHR_RDX_1 = b"\x48\xd1\xea"

XOR_EDX_EDX = b"\x31\xd2"
DEC_EDX = b"\xff\xca"
SHR_EDX_1 = b"\xd1\xea"

'''
Param registers (in order):
rdi, (offset=72)
rsi, (offset=64)
rdx, (offset=32)
rcx, (offset=24)
r8,  (offset=80)
r9   (offset=88)

'''

# Returns a signed int for the offset to the target of the call instruction
def get_call_target_offset(call_insn_bytes):
    call_insn_target_bytes = call_insn_bytes[1:]
    call_insn_target = struct.unpack("<i", call_insn_target_bytes)[0] + 5
    return call_insn_target
    

def create_jump(mnem, offset):
    if mnem == 'jne':
        return create_jne(offset)
    elif mnem == 'jmp':
        return create_jmp(offset)
    elif mnem == 'jle':
        return create_jle(offset)
    elif mnem == 'je':
        return create_je(offset)
    elif mnem == 'jge':
        return create_jge(offset)
    else:
        raise Exception("I don't know yet how to create jumps for mnemonic: {}".format(mnem))

def create_jne(offset):
    if -0x7e <= offset <= 0x81:
        jmp_operand = int_to_bytes(offset - 2, 8) # -2 for instruction length, JMP + 1 byte offset    
        jmp = b'\x75' + jmp_operand 
        
    elif -0xfffffffa <= offset <= 0x100000005:
        jmp_operand = int_to_bytes(offset - 6, 32) # -6 for instruction length, JMP + 1 byte offset    
        jmp = b'\x0f\x85' + jmp_operand
    else:
        raise Exception("Jump offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
    return jmp

def create_je(offset):
	if -0x7e <= offset <= 0x81:
		jmp_operand = int_to_bytes(offset - 2, 8) # -2 for instruction length, JMP + 1 byte offset	
		jmp = b'\x74' + jmp_operand 
		
	elif -0xfffffffa <= offset <= 0x100000005:
		jmp_operand = int_to_bytes(offset - 6, 32) # -6 for instruction length, JMP + 1 byte offset	
		jmp = b'\x0f\x84' + jmp_operand
	else:
		raise Exception("Jump offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
	return jmp

def create_jle(offset):
	if -0x7e <= offset <= 0x81:
		jmp_operand = int_to_bytes(offset - 2, 8) # -2 for instruction length, JMP + 1 byte offset	
		jmp = b'\x72' + jmp_operand 
		
	elif -0xfffffffa <= offset <= 0x100000005:
		jmp_operand = int_to_bytes(offset - 6, 32) # -6 for instruction length, JMP + 1 byte offset	
		jmp = b'\x0f\x8e' + jmp_operand
	else:
		raise Exception("Jump offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
	return jmp

def create_jge(offset):
	if -0x7e <= offset <= 0x81:
		jmp_operand = int_to_bytes(offset - 2, 8) # -2 for instruction length, JMP + 1 byte offset	
		jmp = b'\x7d' + jmp_operand 
		
	elif -0xfffffffa <= offset <= 0x100000005:
		jmp_operand = int_to_bytes(offset - 6, 32) # -6 for instruction length, JMP + 1 byte offset	
		jmp = b'\x0f\x8d' + jmp_operand
	else:
		raise Exception("Jump offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
	return jmp


def create_jmp(offset):
    if -0x7e <= offset <= 0x81:
        jmp_operand = int_to_bytes(offset - 2, 8) # -2 for instruction length, JMP + 1 byte offset    
        jmp = b'\xeb' + jmp_operand 
        
    elif -0xfffffffb <= offset <= 0x100000004:
        jmp_operand = int_to_bytes(offset - 5, 32) # -5 for instruction length, JMP + 1 byte offset    
        jmp = b'\xe9' + jmp_operand
    else:
        raise Exception("Jump offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
    return jmp

def create_call(offset):
    if -0xfffffffb <= offset <= 0x100000004: # -5 for instruction length, JMP + 4 bytes offset
        call_operand = int_to_bytes(offset - 5, 32) # -2 for instruction length, JMP + 1 byte offset    
        call = b'\xe8' + call_operand
    else:
        raise Exception("Call offset too far away. Is {}, should be {} <= x <= {}".format(offset, -4294967291, 4294967300))
    return call

def clear_reg_code(reg):
    reg = reg.lower()
    if reg == 'rax':
        return XOR_RAX_RAX
    elif reg == 'rbx':
        return XOR_RBX_RBX
    elif reg == 'rcx':
        return XOR_RCX_RCX
    elif reg == 'rdx':
        return XOR_RDX_RDX
    elif reg == 'rsi':
        return XOR_RSI_RSI
    elif reg == 'rdi':
        return XOR_RDI_RDI
    elif reg == 'r8':
        return XOR_R8_R8
    elif reg == 'r9':
        return XOR_R9_R9
    elif reg == 'r10':
        return XOR_R10_R10
    elif reg == 'r11':
        return XOR_R11_R11
    elif reg == 'r12':
        return XOR_R12_R12
    elif reg == 'r13':
        return XOR_R13_R13
    elif reg == 'r14':
        return XOR_R14_R14
    elif reg == 'r15':
        return XOR_R15_R15
    else:
        raise Exception("I don't know register: {}".format(reg))

def create_add(reg, const):
    if -0x80 <= const <= 0x7f:
        operand = int_to_bytes(const, 8) # operand length: 1
        operator = b"\x83"
    elif -0x80000000 <= const <= 0x7fffffff:
        operand = int_to_bytes(const, 32) # operand length: 4
        operator = b"\x81"
    else:
        raise Exception("Add constant is absolutely too large: {}".format(const))
    if reg == 'rdi':
        return b"\x48" + operator + b"\xc7" + operand
    elif reg == 'edi':
        return operator + b"\xc7" + operand
    elif reg == 'rsi':
        return b"\x48" + operator + b"\xc6" + operand
    elif reg == 'esi':
        return operator + b"\xc6" + operand
    elif reg == 'rdx':
        return b"\x48" + operator + b"\xc2" + operand
    elif reg == 'edx':
        return operator + b"\xc2" + operand
    elif reg == 'rcx':
        return b"\x48" + operator + b"\xc1" + operand
    elif reg == 'ecx':
        return operator + b"\xc1" + operand
    elif reg == 'r8':
        return b"\x49" + operator + b"\xc0" + operand
    elif reg == 'r9':
        return b"\x49" + operator + b"\xc1" + operand
    else:
        raise Exception("I don't know how to create an ADD instruction for register {}".format(reg))



# Convert a signed int to a sequence of little endian bytes
def int_to_bytes(i, nbits):
    if not nbits in set([8, 32]):
        raise Exception("At the moment we can only convert ints to 8 or 32 bit sequences!")
    if i < 0:
        i = i  % (1 << nbits) # Two's complement?
    if nbits == 8:
        return struct.pack('<B', i)
    elif nbits == 32:
        return struct.pack('<I', i)
    else:
        assert False

def max_out_reg(reg, signed):
    if reg == 'rdi':    
        code = XOR_RDI_RDI + DEC_RDI
        if signed:
            code += SHR_RDI_1
    elif reg == 'rsi':
        code = XOR_RSI_RSI + DEC_RSI
        if signed:
            code += SHR_RSI_1
    elif reg == 'esi':
        code = XOR_ESI_ESI + DEC_ESI
        if signed:
            code += SHR_ESI_1
    elif reg == 'rdx':
        code = XOR_RDX_RDX + DEC_RDX
        if signed:
            code += SHR_RDX_1
    elif reg == 'edx':
        code = XOR_EDX_EDX + DEC_EDX
        if signed:
            code += SHR_EDX_1
    else:
        raise Exception("I don't know the binary code for maxing out register: {}".format(reg))
    return code
        

nose.tools.assert_equal(create_jmp(-4294967291), b"\xe9\x00\x00\x00\x00")
nose.tools.assert_equal(create_jmp(-4294967290), b"\xe9\x01\x00\x00\x00")
nose.tools.assert_equal(create_jmp(-4294967289), b"\xe9\x02\x00\x00\x00")
nose.tools.assert_equal(create_jmp(-129), b"\xe9\x7a\xff\xff\xff")
nose.tools.assert_equal(create_jmp(-128), b"\xe9\x7b\xff\xff\xff")
nose.tools.assert_equal(create_jmp(-127), b"\xe9\x7c\xff\xff\xff")
nose.tools.assert_equal(create_jmp(-126), b"\xeb\x80")
nose.tools.assert_equal(create_jmp(-125), b"\xeb\x81")
nose.tools.assert_equal(create_jmp(-124), b"\xeb\x82")
nose.tools.assert_equal(create_jmp(-3), b"\xeb\xfb")
nose.tools.assert_equal(create_jmp(-2), b"\xeb\xfc")
nose.tools.assert_equal(create_jmp(-1), b"\xeb\xfd")
nose.tools.assert_equal(create_jmp(0), b"\xeb\xfe")
nose.tools.assert_equal(create_jmp(1), b"\xeb\xff")
nose.tools.assert_equal(create_jmp(2), b"\xeb\x00")
nose.tools.assert_equal(create_jmp(3), b"\xeb\x01")
nose.tools.assert_equal(create_jmp(127), b"\xeb\x7d")
nose.tools.assert_equal(create_jmp(128), b"\xeb\x7e")
nose.tools.assert_equal(create_jmp(129), b"\xeb\x7f")
nose.tools.assert_equal(create_jmp(130), b"\xe9\x7d\x00\x00\x00")
nose.tools.assert_equal(create_jmp(131), b"\xe9\x7e\x00\x00\x00")
nose.tools.assert_equal(create_jmp(132), b"\xe9\x7f\x00\x00\x00")
nose.tools.assert_equal(create_jmp(4294967298), b"\xe9\xfd\xff\xff\xff")
nose.tools.assert_equal(create_jmp(4294967299), b"\xe9\xfe\xff\xff\xff")
nose.tools.assert_equal(create_jmp(4294967300), b"\xe9\xff\xff\xff\xff")
        
    
nose.tools.assert_equal(create_call(-4294967291), b"\xe8\x00\x00\x00\x00")
nose.tools.assert_equal(create_call(-4294967290), b"\xe8\x01\x00\x00\x00")
nose.tools.assert_equal(create_call(-4294967289), b"\xe8\x02\x00\x00\x00")
nose.tools.assert_equal(create_call(-3), b"\xe8\xf8\xff\xff\xff")
nose.tools.assert_equal(create_call(-2), b"\xe8\xf9\xff\xff\xff")
nose.tools.assert_equal(create_call(-1), b"\xe8\xfa\xff\xff\xff")
nose.tools.assert_equal(create_call(0), b"\xe8\xfb\xff\xff\xff")
nose.tools.assert_equal(create_call(1), b"\xe8\xfc\xff\xff\xff")
nose.tools.assert_equal(create_call(2), b"\xe8\xfd\xff\xff\xff")
nose.tools.assert_equal(create_call(3), b"\xe8\xfe\xff\xff\xff")
nose.tools.assert_equal(create_call(4294967298), b"\xe8\xfd\xff\xff\xff")
nose.tools.assert_equal(create_call(4294967299), b"\xe8\xfe\xff\xff\xff")
nose.tools.assert_equal(create_call(4294967300), b"\xe8\xff\xff\xff\xff")


nose.tools.assert_equal(create_add('rdi', -0x80000000), b"\x48\x81\xc7\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('rdi', -0x7fffffff), b"\x48\x81\xc7\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('rdi', -0x82), b"\x48\x81\xc7\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('rdi', -0x81), b"\x48\x81\xc7\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('rdi', -0x80), b"\x48\x83\xc7\x80")
nose.tools.assert_equal(create_add('rdi', -0x79), b"\x48\x83\xc7\x87")
nose.tools.assert_equal(create_add('rdi', -0x01), b"\x48\x83\xc7\xff")
nose.tools.assert_equal(create_add('rdi', 0x00), b"\x48\x83\xc7\x00")
nose.tools.assert_equal(create_add('rdi', 0x01), b"\x48\x83\xc7\x01")
nose.tools.assert_equal(create_add('rdi', 0x7e), b"\x48\x83\xc7\x7e")
nose.tools.assert_equal(create_add('rdi', 0x7f), b"\x48\x83\xc7\x7f")
nose.tools.assert_equal(create_add('rdi', 0x80), b"\x48\x81\xc7\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('rdi', 0x81), b"\x48\x81\xc7\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('rdi', 0x7ffffffe), b"\x48\x81\xc7\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('rdi', 0x7fffffff), b"\x48\x81\xc7\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('edi', -0x80000000), b"\x81\xc7\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('edi', -0x7fffffff), b"\x81\xc7\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('edi', -0x82), b"\x81\xc7\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('edi', -0x81), b"\x81\xc7\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('edi', -0x80), b"\x83\xc7\x80")
nose.tools.assert_equal(create_add('edi', -0x79), b"\x83\xc7\x87")
nose.tools.assert_equal(create_add('edi', -0x01), b"\x83\xc7\xff")
nose.tools.assert_equal(create_add('edi', 0x00), b"\x83\xc7\x00")
nose.tools.assert_equal(create_add('edi', 0x01), b"\x83\xc7\x01")
nose.tools.assert_equal(create_add('edi', 0x7e), b"\x83\xc7\x7e")
nose.tools.assert_equal(create_add('edi', 0x7f), b"\x83\xc7\x7f")
nose.tools.assert_equal(create_add('edi', 0x80), b"\x81\xc7\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('edi', 0x81), b"\x81\xc7\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('edi', 0x7ffffffe), b"\x81\xc7\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('edi', 0x7fffffff), b"\x81\xc7\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('rsi', -0x80000000), b"\x48\x81\xc6\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('rsi', -0x7fffffff), b"\x48\x81\xc6\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('rsi', -0x82), b"\x48\x81\xc6\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('rsi', -0x81), b"\x48\x81\xc6\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('rsi', -0x80), b"\x48\x83\xc6\x80")
nose.tools.assert_equal(create_add('rsi', -0x79), b"\x48\x83\xc6\x87")
nose.tools.assert_equal(create_add('rsi', -0x01), b"\x48\x83\xc6\xff")
nose.tools.assert_equal(create_add('rsi', 0x00), b"\x48\x83\xc6\x00")
nose.tools.assert_equal(create_add('rsi', 0x01), b"\x48\x83\xc6\x01")
nose.tools.assert_equal(create_add('rsi', 0x7e), b"\x48\x83\xc6\x7e")
nose.tools.assert_equal(create_add('rsi', 0x7f), b"\x48\x83\xc6\x7f")
nose.tools.assert_equal(create_add('rsi', 0x80), b"\x48\x81\xc6\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('rsi', 0x81), b"\x48\x81\xc6\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('rsi', 0x7ffffffe), b"\x48\x81\xc6\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('rsi', 0x7fffffff), b"\x48\x81\xc6\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('esi', -0x80000000), b"\x81\xc6\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('esi', -0x7fffffff), b"\x81\xc6\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('esi', -0x82), b"\x81\xc6\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('esi', -0x81), b"\x81\xc6\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('esi', -0x80), b"\x83\xc6\x80")
nose.tools.assert_equal(create_add('esi', -0x79), b"\x83\xc6\x87")
nose.tools.assert_equal(create_add('esi', -0x01), b"\x83\xc6\xff")
nose.tools.assert_equal(create_add('esi', 0x00), b"\x83\xc6\x00")
nose.tools.assert_equal(create_add('esi', 0x01), b"\x83\xc6\x01")
nose.tools.assert_equal(create_add('esi', 0x7e), b"\x83\xc6\x7e")
nose.tools.assert_equal(create_add('esi', 0x7f), b"\x83\xc6\x7f")
nose.tools.assert_equal(create_add('esi', 0x80), b"\x81\xc6\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('esi', 0x81), b"\x81\xc6\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('esi', 0x7ffffffe), b"\x81\xc6\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('esi', 0x7fffffff), b"\x81\xc6\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('rdx', -0x80000000), b"\x48\x81\xc2\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('rdx', -0x7fffffff), b"\x48\x81\xc2\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('rdx', -0x82), b"\x48\x81\xc2\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('rdx', -0x81), b"\x48\x81\xc2\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('rdx', -0x80), b"\x48\x83\xc2\x80")
nose.tools.assert_equal(create_add('rdx', -0x79), b"\x48\x83\xc2\x87")
nose.tools.assert_equal(create_add('rdx', -0x01), b"\x48\x83\xc2\xff")
nose.tools.assert_equal(create_add('rdx', 0x00), b"\x48\x83\xc2\x00")
nose.tools.assert_equal(create_add('rdx', 0x01), b"\x48\x83\xc2\x01")
nose.tools.assert_equal(create_add('rdx', 0x7e), b"\x48\x83\xc2\x7e")
nose.tools.assert_equal(create_add('rdx', 0x7f), b"\x48\x83\xc2\x7f")
nose.tools.assert_equal(create_add('rdx', 0x80), b"\x48\x81\xc2\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('rdx', 0x81), b"\x48\x81\xc2\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('rdx', 0x7ffffffe), b"\x48\x81\xc2\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('rdx', 0x7fffffff), b"\x48\x81\xc2\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('edx', -0x80000000), b"\x81\xc2\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('edx', -0x7fffffff), b"\x81\xc2\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('edx', -0x82), b"\x81\xc2\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('edx', -0x81), b"\x81\xc2\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('edx', -0x80), b"\x83\xc2\x80")
nose.tools.assert_equal(create_add('edx', -0x79), b"\x83\xc2\x87")
nose.tools.assert_equal(create_add('edx', -0x01), b"\x83\xc2\xff")
nose.tools.assert_equal(create_add('edx', 0x00), b"\x83\xc2\x00")
nose.tools.assert_equal(create_add('edx', 0x01), b"\x83\xc2\x01")
nose.tools.assert_equal(create_add('edx', 0x7e), b"\x83\xc2\x7e")
nose.tools.assert_equal(create_add('edx', 0x7f), b"\x83\xc2\x7f")
nose.tools.assert_equal(create_add('edx', 0x80), b"\x81\xc2\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('edx', 0x81), b"\x81\xc2\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('edx', 0x7ffffffe), b"\x81\xc2\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('edx', 0x7fffffff), b"\x81\xc2\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('rcx', -0x80000000), b"\x48\x81\xc1\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('rcx', -0x7fffffff), b"\x48\x81\xc1\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('rcx', -0x82), b"\x48\x81\xc1\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('rcx', -0x81), b"\x48\x81\xc1\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('rcx', -0x80), b"\x48\x83\xc1\x80")
nose.tools.assert_equal(create_add('rcx', -0x79), b"\x48\x83\xc1\x87")
nose.tools.assert_equal(create_add('rcx', -0x01), b"\x48\x83\xc1\xff")
nose.tools.assert_equal(create_add('rcx', 0x00), b"\x48\x83\xc1\x00")
nose.tools.assert_equal(create_add('rcx', 0x01), b"\x48\x83\xc1\x01")
nose.tools.assert_equal(create_add('rcx', 0x7e), b"\x48\x83\xc1\x7e")
nose.tools.assert_equal(create_add('rcx', 0x7f), b"\x48\x83\xc1\x7f")
nose.tools.assert_equal(create_add('rcx', 0x80), b"\x48\x81\xc1\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('rcx', 0x81), b"\x48\x81\xc1\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('rcx', 0x7ffffffe), b"\x48\x81\xc1\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('rcx', 0x7fffffff), b"\x48\x81\xc1\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('ecx', -0x80000000), b"\x81\xc1\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('ecx', -0x7fffffff), b"\x81\xc1\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('ecx', -0x82), b"\x81\xc1\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('ecx', -0x81), b"\x81\xc1\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('ecx', -0x80), b"\x83\xc1\x80")
nose.tools.assert_equal(create_add('ecx', -0x79), b"\x83\xc1\x87")
nose.tools.assert_equal(create_add('ecx', -0x01), b"\x83\xc1\xff")
nose.tools.assert_equal(create_add('ecx', 0x00), b"\x83\xc1\x00")
nose.tools.assert_equal(create_add('ecx', 0x01), b"\x83\xc1\x01")
nose.tools.assert_equal(create_add('ecx', 0x7e), b"\x83\xc1\x7e")
nose.tools.assert_equal(create_add('ecx', 0x7f), b"\x83\xc1\x7f")
nose.tools.assert_equal(create_add('ecx', 0x80), b"\x81\xc1\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('ecx', 0x81), b"\x81\xc1\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('ecx', 0x7ffffffe), b"\x81\xc1\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('ecx', 0x7fffffff), b"\x81\xc1\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('r8', -0x80000000), b"\x49\x81\xc0\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('r8', -0x7fffffff), b"\x49\x81\xc0\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('r8', -0x82), b"\x49\x81\xc0\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('r8', -0x81), b"\x49\x81\xc0\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('r8', -0x80), b"\x49\x83\xc0\x80")
nose.tools.assert_equal(create_add('r8', -0x79), b"\x49\x83\xc0\x87")
nose.tools.assert_equal(create_add('r8', -0x01), b"\x49\x83\xc0\xff")
nose.tools.assert_equal(create_add('r8', 0x00), b"\x49\x83\xc0\x00")
nose.tools.assert_equal(create_add('r8', 0x01), b"\x49\x83\xc0\x01")
nose.tools.assert_equal(create_add('r8', 0x7e), b"\x49\x83\xc0\x7e")
nose.tools.assert_equal(create_add('r8', 0x7f), b"\x49\x83\xc0\x7f")
nose.tools.assert_equal(create_add('r8', 0x80), b"\x49\x81\xc0\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('r8', 0x81), b"\x49\x81\xc0\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('r8', 0x7ffffffe), b"\x49\x81\xc0\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('r8', 0x7fffffff), b"\x49\x81\xc0\xff\xff\xff\x7f")
nose.tools.assert_equal(create_add('r9', -0x80000000), b"\x49\x81\xc1\x00\x00\x00\x80")
nose.tools.assert_equal(create_add('r9', -0x7fffffff), b"\x49\x81\xc1\x01\x00\x00\x80")
nose.tools.assert_equal(create_add('r9', -0x82), b"\x49\x81\xc1\x7e\xff\xff\xff")
nose.tools.assert_equal(create_add('r9', -0x81), b"\x49\x81\xc1\x7f\xff\xff\xff")
nose.tools.assert_equal(create_add('r9', -0x80), b"\x49\x83\xc1\x80")
nose.tools.assert_equal(create_add('r9', -0x79), b"\x49\x83\xc1\x87")
nose.tools.assert_equal(create_add('r9', -0x01), b"\x49\x83\xc1\xff")
nose.tools.assert_equal(create_add('r9', 0x00), b"\x49\x83\xc1\x00")
nose.tools.assert_equal(create_add('r9', 0x01), b"\x49\x83\xc1\x01")
nose.tools.assert_equal(create_add('r9', 0x7e), b"\x49\x83\xc1\x7e")
nose.tools.assert_equal(create_add('r9', 0x7f), b"\x49\x83\xc1\x7f")
nose.tools.assert_equal(create_add('r9', 0x80), b"\x49\x81\xc1\x80\x00\x00\x00")
nose.tools.assert_equal(create_add('r9', 0x81), b"\x49\x81\xc1\x81\x00\x00\x00")
nose.tools.assert_equal(create_add('r9', 0x7ffffffe), b"\x49\x81\xc1\xfe\xff\xff\x7f")
nose.tools.assert_equal(create_add('r9', 0x7fffffff), b"\x49\x81\xc1\xff\xff\xff\x7f")

