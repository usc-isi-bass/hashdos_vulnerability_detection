
# Returns the call sites calling to the function at target_func_addr
def get_call_sites_to(cfg, target_func_addr):
    call_sites = []
    if not target_func_addr in cfg.functions:
        raise Exception("Could not find a function with addr 0x{:x} in CFG".format(target_func_addr))
    target_func = cfg.functions[target_func_addr]
    target_func_node = cfg.model.get_any_node(addr=target_func_addr)

    for call_site_node in target_func_node.predecessors:
        caller_func = cfg.functions.function(call_site_node.function_address)
        call_site_addr = call_site_node.addr
        # Sometimes there are weird jumps
        if call_site_addr in caller_func.get_call_sites():
            assert caller_func.get_call_target(call_site_addr) == target_func_addr
            call_sites.append(call_site_addr)
    return call_sites

# Gets the call instruction from the call site at address call_site_addr
def get_call_insn(cfg, call_site_addr):
    call_site_node = cfg.model.get_any_node(addr=call_site_addr)
    call_site_block = call_site_node.block
    call_insn_addr = call_site_block.instruction_addrs[-1]
    call_insn = None
    for insn in call_site_block.capstone.insns:
        if insn.address == call_insn_addr:
            call_insn = insn
    if call_insn is None:
        raise Exception("Could not find the call instruction in block 0x{:x}".format(call_site))
    if not call_insn.mnemonic == 'call':
        raise Exception("Not a call instruction: {}".format(call_insn))
    return call_insn
