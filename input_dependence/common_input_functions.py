import angr

input_function_names = set(['fgets', 'gets', 'fgetc', 'recv', 'rcvfrom', 'recvmsg', 'read', 'fread', 'scanf', 'sscanf', 'fscanf', 'vscanf', 'vsscanf', 'vfscanf', 'getchar', 'getline', 'getdelim', 'SSL_read'])




def hook_input_funcs(proj):
    #for input_func_name in input_function_names:
    for input_func_name in input_func_hook_map:
        if proj.loader.find_symbol(input_func_name):
            if input_func_name in input_func_hook_map:
                proj.hook_symbol(input_func_name, input_func_hook_map[input_func_name]())
            else:
                raise Exception("No hook for input function: {}".format(input_func_name))
                



# XXX This doesn't work. For some reason args is always args = []
class InputHook(angr.SimProcedure):
    def run(self, *args):
        for i, arg in enumerate(args):
            symbolic_name = 'input_buffer_arg_{}'.format(i)
            self.state.memory.make_symbolic(symbolic_name, arg, 1)

# char *fgets(char *s, int size, FILE *stream);
class FgetsHook(angr.SimProcedure):
    def run(self, s, size, stream):
        self.state.memory.make_symbolic('fgets_input', s, length=size)

# char *gets(char *s);
class GetsHook(angr.SimProcedure):
    def run(self, s):
        self.state.memory.make_symbolic('gets_input', s, length=4)

# int fgetc(FILE *stream); TODO
# int getc(FILE *stream); TODO

# ssize_t recv(int sockfd, void *buf, size_t len, int flags);
class RecvHook(angr.SimProcedure):
    def run(self, sockfd, buf, leng, flags):
        self.state.memory.make_symbolic('recv_input', buf, length=leng)

# ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);
class RecvFromHook(angr.SimProcedure):
    def run(self, sockfd, buf, leng, flags, src_addr, addrlen):
        self.state.memory.make_symbolic('recvfrom_input', buf, length=leng)
# ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
class RecvMsgHook(angr.SimProcedure):
    def run(self, sockfd, msg, leng, flags):
        self.state.memory.make_symbolic('recvmsg_input', msg, length=4)

# ssize_t read(int fd, void *buf, size_t count);
class ReadHook(angr.SimProcedure):
    def run(self, fd, buf, count):
        self.state.memory.make_symbolic('read_input', buf, length=count)

# size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
class FReadHook(angr.SimProcedure):
    def run(self, ptr, size, nmemb, stream):
        self.state.memory.make_symbolic('fread_input', ptr, length=size)

# int scanf(const char *format, ...); TODO
# int sscanf(const char *str, const char *format, ...); TODO
# int fscanf(FILE *stream, const char *format, ...); TODO
# int vscanf(const char *format, va_list ap); TODO
# int vsscanf(const char *str, const char *format, va_list ap); TODO
# int vfscanf(FILE *stream, const char *format, va_list ap); TODO
# int getchar(void); TODO

#ssize_t getline(char **lineptr, size_t *n, FILE *stream);
#ssize_t getdelim(char **lineptr, size_t *n, int delim, FILE *stream);
#int SSL_read(SSL *ssl, void *buf, int num);
class SSLReadHook(angr.SimProcedure):
    def run(self, ssl, buf, num):
        print("SSLReadHook executed")
        #self.state.memory.store(buf, 'JOIN SSL_read\r\n')
        self.state.memory.make_symbolic('SSL_read', buf, length=num)



input_func_hook_map = {
    'fgets':FgetsHook,
    'gets':GetsHook,
    'recv':RecvHook,
    'recvfrom':RecvFromHook,
    'recvmsg':RecvMsgHook,
    'read':ReadHook,
    'fread':FReadHook
}
