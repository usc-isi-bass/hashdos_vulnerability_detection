import argparse
import sys
import os
import logging

# Because apparently python only adds the parent directory of the running script to the PATH.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from binalyzer.analyzers.parallel_analyzer import ParallelAnalyzer
from binalyzer.util.analyzer_argument_parser import ParallelAnalyzerArgumentParser

from analyses.hash_func_use.hash_func_use_analysis import HashFuncUseAnalysis

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('archinfo.arch').setLevel(logging.CRITICAL)

def main():
    analyzer_argument_parser = ParallelAnalyzerArgumentParser()

    parser = argparse.ArgumentParser('Search for hash functions in binary executables.', parents=[analyzer_argument_parser])
    parser.add_argument('--score_cutoff', default=80, help='The cutoff score at which to consider a classification correct.', type=int)
    parser.add_argument('--symex_blocks', default=10, help='The number of blocks to execute symbolically after the return of the hash function', type=int)

    args = parser.parse_args()
    root_dir = args.root_dir
    elf_list = args.elf_list
    break_limit = args.break_limit
    remove_duplicates = args.remove_duplicates
    results_path = args.results_path
    timeout = args.timeout
    nthreads = args.nthreads
    similarity_score_cutoff = args.score_cutoff
    block_symex_upperbound = args.symex_blocks

   
    analysis = HashFuncUseAnalysis(similarity_score_cutoff, block_symex_upperbound)
    par_analyzer = ParallelAnalyzer(analysis, root_dir=root_dir, elf_list=elf_list, break_limit=break_limit, remove_duplicates=remove_duplicates, results_path=results_path, timeout=timeout, nthreads=nthreads)
    par_analyzer.run_analysis()

if __name__ == "__main__":
    main()
