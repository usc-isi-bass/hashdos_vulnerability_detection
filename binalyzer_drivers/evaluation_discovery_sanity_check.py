#! /usr/bin/env python3
import argparse
import csv
import jsonpickle
import logging
import os
import subprocess
import sys
import tempfile

# Because apparently python only adds the parent directory of the running
# script to the PATH.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__),
                                                '..')))

from binalyzer.analyzers.parallel_analyzer import ParallelAnalyzer  # noqa: E402, E501
from analyses.hash_func_discovery.hash_func_discovery_analysis import HashFuncDiscoveryAnalysis  # noqa: E402, E501

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)
logging.getLogger('claripy.balancer').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('archinfo.arch').setLevel(logging.CRITICAL)

elf_file_location = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 '..',
                                 'test_binaries')

parser = argparse.ArgumentParser(
    description='Test a set of binaries.')
parser.add_argument('--csv-out', action='store', metavar='FILE',
                    required=True, help='Test results in CSV format')
parser.add_argument('--source', action='store', metavar='DIRECTORY',
                    required=True, help='Directory of compiled .c files')
parser.add_argument('--cutoff', action='store', metavar='N', default=80,
                    help='Percent confidence cutoff')


def main():
    args = parser.parse_args()

    programs_path = args.source
    results_path = os.path.join(args.source, 'results')
    os.mkdir(results_path)

    similarity_score_cutoff = int(args.cutoff)
    analysis = HashFuncDiscoveryAnalysis(similarity_score_cutoff)

    print('Running analysis...')
    par_analyzer = ParallelAnalyzer(analysis,
                                    root_dir=programs_path,
                                    elf_list_file=None,
                                    break_limit=None,
                                    remove_duplicates=True,
                                    results_path=results_path,
                                    timeout=None,
                                    nthreads=1)
    par_analyzer.run_analysis()

    with open(args.csv_out, 'w') as csv_out:
        csv_out.write('binary,func_name,func_addr,hash_func_name\n')

        with open(results_path, 'r') as fd:
            for line in fd:
                line = line.strip()
                results = jsonpickle.loads(line)
                analysis_target = results.analysis_target
                filename = analysis_target.file_name
                analysis_results = results.analysis_results
                discovered_hash_funcs = analysis_results.discovered_hash_funcs
                print(filename)
                if len(discovered_hash_funcs) == 0:
                    print("  No hash funcs discovered!")
                    csv_out.write('{},{},{},{}\n'.format(filename,
                                                         '0',
                                                         '-1',
                                                         'notfound'))
                else:
                    for discovered_hash_func in discovered_hash_funcs:
                        func_name = discovered_hash_func.func_name
                        func_addr = discovered_hash_func.func_addr
                        hash_func_name = discovered_hash_func.hash_func_name

                        print("  {}@0x{:x} classified as {}"
                              .format(func_name,
                                      func_addr,
                                      hash_func_name))

                        csv_out.write('{},{},{},{}\n'.format(filename,
                                                             func_name,
                                                             func_addr,
                                                             hash_func_name))

        print('Saved hash detection results to {} in CSV format!'.format(
            args.csv_out))


if __name__ == "__main__":
    main()
