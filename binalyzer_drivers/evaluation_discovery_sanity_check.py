import sys
import os
import logging
import itertools
import tempfile
import shutil

# Because apparently python only adds the parent directory of the running script to the PATH.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from binalyzer.analyzers.parallel_analyzer import ParallelAnalyzer
from binalyzer.util.analyzer_argument_parser import ParallelAnalyzerArgumentParser

from analyses.hash_func_discovery.hash_func_discovery_analysis import HashFuncDiscoveryAnalysis

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)
logging.getLogger('claripy.balancer').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('archinfo.arch').setLevel(logging.CRITICAL)

elf_file_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'test_binaries')

elf_file_names = ["rshash", "jshash", "pjwhash", "elfhash", "bkdrhash", "sdbmhash", "djbhash", "dekhash", "aphash"]
variations = ['_gcc_O0', '_gcc_O1', '_gcc_O2', '_gcc_O3', '_gcc_Os', '_gcc_Ofast', '_clang_O0', '_clang_O1', '_clang_O2', '_clang_O3', '_clang_Ofast', '_clang_Os', '_clang_Oz', '_clang_Og']

def main():


    tempdir = tempfile.mkdtemp(prefix="hash_func_discovery_evaluation_sanity_check")
    results_path = os.path.join(tempdir, 'results.txt')
    similarity_score_cutoff = 80
    analysis = HashFuncDiscoveryAnalysis(similarity_score_cutoff)
    #elf_list = [os.path.join(elf_file_location, hash_name + variation) for hash_name, variation in itertools.product(elf_file_names, variations)]

    par_analyzer = ParallelAnalyzer(analysis, root_dir=None, elf_list_file='./evaluation_hash_discovery_sanity_check_binaries_list.txt', break_limit=None, remove_duplicates=True, results_path=results_path, timeout=None, nthreads=1)
    par_analyzer.run_analysis()

    #shutil.rmtree(tempdir)

if __name__ == "__main__":
    main()
