import os
import nose
from nose.tools import *
import itertools
import angr

import stashed_extended.stashed as stashed

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')

# TODO pjwhash gets confused for elf hash because they are so similar
elf_file_names = ["rshash", "jshash", "pjwhash", "elfhash", "bkdrhash", "sdbmhash", "djbhash", "dekhash", "aphash"]
#elf_file_names = ["rshash", "jshash", "elfhash", "bkdrhash", "sdbmhash", "djbhash", "dekhash", "aphash"]
variations = ['_gcc_O0', '_gcc_O1', '_gcc_O2', '_gcc_O3', '_gcc_Os', '_gcc_Ofast', '_clang_O0', '_clang_O1', '_clang_O2', '_clang_O3', '_clang_Ofast', '_clang_Os', '_clang_Oz', '_clang_Og']

def main():
    test_discover_at_optimization_levels()

def test_discover_at_optimization_levels():

    for elf_file_name, variation in itertools.product(elf_file_names, variations):
        full_file_path = os.path.join(test_location, elf_file_name + variation)
        assert os.path.exists(full_file_path)
        proj = angr.Project(full_file_path, auto_load_libs=False)
        cfg_fast = proj.analyses.CFGFast()
        stash = stashed.Stashed(proj, cfg_fast)
        func_addr_to_alg_with_max_score = {}
        for func_match in stash.func_matches:
            discovered_func, discovered_func_addr, discovered_func_score = stash.func_matches[func_match]
            if discovered_func_score < 80:
                continue
            if discovered_func.addr not in func_addr_to_alg_with_max_score:
                func_addr_to_alg_with_max_score[discovered_func.addr] = (func_match, discovered_func_score)
            else:
                if discovered_func_score > func_addr_to_alg_with_max_score[discovered_func.addr][1]:
                    func_addr_to_alg_with_max_score[discovered_func.addr] = (func_match, discovered_func_score)

        for func_match, score in func_addr_to_alg_with_max_score.values():
            assert_equal(func_match, elf_file_name, msg="Func {} was confused for {} with score: {} in variation: {}".format(elf_file_name, func_match, score, variation))


if __name__ == "__main__":
    main()


