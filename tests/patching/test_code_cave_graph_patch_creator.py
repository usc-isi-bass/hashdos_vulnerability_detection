import os
from nose.tools import *
import sys

#import curses
#curses.setupterm()

import angr

from hash_patcher.interfunc_code_cave_miner import InterFuncCodeCaveMiner
from hash_patcher.code_cave_graph_patch_creator import CodeCaveGraphPatchCreator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')


def test_inter_func_code_cave_miner():
    elf_file_name = os.path.join(test_location, 'inter_func_code_caves')
    proj = angr.Project(elf_file_name, auto_load_libs=False)


    ifccm = InterFuncCodeCaveMiner(elf_file_name)
    code_cave_graph = ifccm.get_code_cave_graph()
    ccgpc = CodeCaveGraphPatchCreator(code_cave_graph, proj.arch)

    code_cave_seq = [(0x4011ed, 3, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction. Too large for the code cave
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_none(fitted_patch, msg="The patch should not have fitted inside the code cave sequence.")

    code_cave_seq = [(0x40116c, 4, 'long'), (0x4011ed, 3, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction. Too large for the code cave
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_none(fitted_patch, msg="The patch should not have fitted inside the code cave sequence.")

    code_cave_addr = 0x401137
    code_cave_size = 9
    code_cave_seq = [(code_cave_addr, code_cave_size, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction.
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(code_cave_addr in fitted_patch, "The address of the first code cave in the sequence 0x{:x} is not in the dict.".format(code_cave_addr))
    assert_equal(fitted_patch[code_cave_addr], b"\x48\xc7\xc0\x00\x00\x00\x00", "The binary code in the code cave is not what we expected.")

    code_cave_addr = 0x401119
    code_cave_size = 7
    code_cave_seq = [(code_cave_addr, code_cave_size, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction.
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(code_cave_addr in fitted_patch, "The address of the first code cave in the sequence 0x{:x} is not in the dict.".format(code_cave_addr))
    assert_equal(fitted_patch[code_cave_addr], b"\x48\xc7\xc0\x00\x00\x00\x00", "The binary code in the code cave is not what we expected.")
    
    # The patch does not fit into the first cave, but it does in the second. The first one will just be a jmp
    code_cave_seq = [(0x40116c, 4, 'short'), (0x401119, 7, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction.
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(0x40116c in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x40116c))
    assert_true(0x401119 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401119))
    assert_equal(fitted_patch[0x40116c], b"\x90\x90", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40116e], b"\xeb\xa9", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x401119], b"\x48\xc7\xc0\x00\x00\x00\x00", "The binary code in the code cave is not what we expected.")

    # Because of the jump at the end of the first code cave, the patch now does not fit.
    # It is possible to fix the algorithm to cut off the second code cave and then just put the patch in the first
    code_cave_seq = [(0x401119, 7, 'short'), (0x40116c, 4, None)]
    patch_asm_insns = ['mov rax, 0x00'] # Should be a 7 byte instruction.
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_none(fitted_patch, msg="The patch should not have fitted inside the code cave sequence.")

    # Each code cave takes one instruction, except the last, which takes two
    code_cave_seq = [(0x401099, 7, 'short'), (0x4010d9, 7, 'short'), (0x401119, 7, None)]
    patch_asm_insns = ['inc rax', 'inc rbx', 'inc rcx', 'inc rsi']
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(0x401099 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401099))
    assert_true(0x4010d9 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x4010d9))
    assert_true(0x401119 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401119))
    assert_equal(fitted_patch[0x401099], b"\x48\xff\xc0", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x4010d9], b"\x48\xff\xc3", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x401119], b"\x48\xff\xc1", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40111c], b"\x48\xff\xc6", "The binary code in the code cave is not what we expected.")
    
    # Each code cave takes two instructions, except the last, which takes three
    code_cave_seq = [(0x401099, 7, 'short'), (0x4010d9, 7, 'short'), (0x401119, 7, None)]
    patch_asm_insns = ['inc eax', 'inc eax', 'inc ebx', 'inc ebx', 'inc ecx', 'inc ecx', 'inc ecx']
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(0x401099 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401099))
    assert_true(0x4010d9 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x4010d9))
    assert_true(0x401119 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401119))
    assert_equal(fitted_patch[0x401099], b"\xff\xc0", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40109b], b"\xff\xc0", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x4010d9], b"\xff\xc3", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x4010db], b"\xff\xc3", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x401119], b"\xff\xc1", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40111b], b"\xff\xc1", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40111d], b"\xff\xc1", "The binary code in the code cave is not what we expected.")

    # The first code cave takes two two inc instructions. The second code cave cannot fit the second instruction and a jump, so it takes just the jump. The last code cave takes the third instruction.
    code_cave_seq = [(0x401099, 7, 'short'), (0x4010d9, 7, 'short'), (0x401119, 7, None)]
    patch_asm_insns = ['inc eax', 'inc eax', 'mov rax, 0x00']
    fitted_patch = ccgpc.fit_patch_to_cave_seq(patch_asm_insns, code_cave_seq)
    assert_is_not_none(fitted_patch, msg="The patch should have fitted inside the code cave sequence.")
    assert_true(0x401099 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401099))
    assert_true(0x4010d9 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x4010d9))
    assert_true(0x401119 in fitted_patch, "The address of the code cave in the sequence 0x{:x} is not in the dict.".format(0x401119))
    assert_equal(fitted_patch[0x401099], b"\xff\xc0", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x40109b], b"\xff\xc0", "The binary code in the code cave is not what we expected.")
    assert_equal(fitted_patch[0x401119], b"\x48\xc7\xc0\x00\x00\x00\x00", "The binary code in the code cave is not what we expected.")

