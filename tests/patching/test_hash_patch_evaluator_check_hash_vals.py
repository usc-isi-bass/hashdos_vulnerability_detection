import os
from nose.tools import *
import tempfile
import shutil
import subprocess

import angr
import claripy

from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator
from hash_patcher.hash_patch_evaluator import HashPatchEvaluator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_get_ext_mem_refs_bkdr_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'BKDRHash', 'sig1')

def test_get_ext_mem_refs_bkdr_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'BKDRHash', 'sig2')

def test_get_ext_mem_refs_dek_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DEKHash', 'sig1')

def test_get_ext_mem_refs_dek_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DEKHash', 'sig2')

def test_get_ext_mem_refs_pjw_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'PJWHash', 'sig1')

def test_get_ext_mem_refs_pjw_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'PJWHash', 'sig2')

def test_get_ext_mem_refs_rs_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'RSHash', 'sig1')

def test_get_ext_mem_refs_rs_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'RSHash', 'sig2')

def test_get_ext_mem_refs_js_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'JSHash', 'sig1')

def test_get_ext_mem_refs_js_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'JSHash', 'sig2')

def test_get_ext_mem_refs_sdbm_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'SDBMHash', 'sig1')

def test_get_ext_mem_refs_sdbm_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'SDBMHash', 'sig2')

def test_get_ext_mem_refs_djb_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DJBHash', 'sig1')

def test_get_ext_mem_refs_djb_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DJBHash', 'sig2')

def test_get_ext_mem_refs_elf_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'ELFHash', 'sig1')

def test_get_ext_mem_refs_elf_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'ELFHash', 'sig2')

def test_get_ext_mem_refs_ap_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'APHash', 'sig1')

def test_get_ext_mem_refs_ap_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'APHash', 'sig2')


def check_elf_and_hash(elf_file_path, hash_func_name, sig):
    elf_file_path = os.path.join(test_location, elf_file_path)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name=hash_func_name)

    hash_patch_evaluator = HashPatchEvaluator(elf_file_path, hash_func.addr, sig, vuln_proj=proj)


    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()
    hash_func = cfg.functions.function(name=hash_func_name)

    if sig == 'sig1':
        len_in_reg = 'rsi'
    elif sig == 'sig2':
        len_in_reg = None
    else:
        raise Exception("Unknown signature: {}".format(sig))
    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    #hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=len_in_reg, out_mod=2**31)
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=len_in_reg, out_mod=2**24)
    hash_patch_asm_code = hpag.get_asm_code()

    patcher = StaticPatcher(elf_file_path)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)


    hash_patch_evaluator.set_patch(patched_elf_file_path)


    hash_patch_irregularities = hash_patch_evaluator.check_hash_vals(conc_bufs=['aa'])

    assert_true(len(hash_patch_irregularities) == 0, msg="Irregularity found when evaluating the hash values of the patched hash function: {}".format([str(irregularity) for irregularity in hash_patch_irregularities]))


    shutil.rmtree(tempdir)



