import os
from nose.tools import *
import sys
import tempfile
import shutil
import subprocess

import angr

from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')


def test_siphash_case_insensitive_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32) # the out_mod is 2^32, because in the context of the target binary, the return value will be interpreted as an int
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 2506759691', msg='The patched binary {} created from {} should have returned 2506759691, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 2506759691', msg='The patched binary {} created from {} should have returned 2506759691, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_siphash_case_insensitive_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 2506759691', msg='The patched binary {} created from {} should have returned 2506759691, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 2506759691', msg='The patched binary {} created from {} should have returned 2506759691, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)


def test_siphash_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 1120073065', msg='The patched binary {} created from {} should have returned 1120073065, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 795266138', msg='The patched binary {} created from {} should have returned 795266138, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 1822118885', msg='The patched binary {} created from {} should have returned 1822118885, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 1073798917', msg='The patched binary {} created from {} should have returned 1073798917, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_siphash_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 3358194305', msg='The patched binary {} created from {} should have returned 3358194305, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 1120073065', msg='The patched binary {} created from {} should have returned 1120073065, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 795266138', msg='The patched binary {} created from {} should have returned 795266138, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 1822118885', msg='The patched binary {} created from {} should have returned 1822118885, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 1073798917', msg='The patched binary {} created from {} should have returned 1073798917, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_univhash_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 2191461160', msg='The patched binary {} created from {} should have returned 2191461160, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 4230285032', msg='The patched binary {} created from {} should have returned 4230285032, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 3302325571', msg='The patched binary {} created from {} should have returned 3302325571, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 2681412067', msg='The patched binary {} created from {} should have returned 2681412067, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_univhash_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 2191461160', msg='The patched binary {} created from {} should have returned 2191461160, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 4230285032', msg='The patched binary {} created from {} should have returned 4230285032, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 3302325571', msg='The patched binary {} created from {} should have returned 3302325571, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 2681412067', msg='The patched binary {} created from {} should have returned 2681412067, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_univhash_case_insensitive_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 1377037283', msg='The patched binary {} created from {} should have returned 1377037283, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 1377037283', msg='The patched binary {} created from {} should have returned 1377037283, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_univhash_case_insensitive_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 1803756648', msg='The patched binary {} created from {} should have returned 1803756648, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 1377037283', msg='The patched binary {} created from {} should have returned 1377037283, not {}'.format(patched_elf_file_path, elf_file_name, output))

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 1377037283', msg='The patched binary {} created from {} should have returned 1377037283, not {}'.format(patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_siphash_case_insensitive_bip():
    elf_file_name = os.path.join(test_location, 'bip_hash')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 228', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=256)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='hash_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 129', msg='The patched binary {} created from {} should have returned 129, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 3358194305 % 256 == 129

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 129', msg='The patched binary {} created from {} should have returned 129, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 3358194305 % 256 == 129

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 129', msg='The patched binary {} created from {} should have returned 129, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 3358194305 % 256 == 129

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 11', msg='The patched binary {} created from {} should have returned 11, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 2506759691 % 256 == 11

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 11', msg='The patched binary {} created from {} should have returned 11, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 2506759691 % 256 == 11

    shutil.rmtree(tempdir)

def test_univhash_case_insensitive_bip():
    elf_file_name = os.path.join(test_location, 'bip_hash')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 228', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=256)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='hash_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 104', msg='The patched binary {} created from {} should have returned 104, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1803756648 % 256

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 104', msg='The patched binary {} created from {} should have returned 104, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1803756648 % 256

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 104', msg='The patched binary {} created from {} should have returned 104, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1803756648 % 256

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 227', msg='The patched binary {} created from {} should have returned 227, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1377037283 % 256

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 227', msg='The patched binary {} created from {} should have returned 227, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1377037283 % 256

    shutil.rmtree(tempdir)


def test_siphash_sn():
    elf_file_name = os.path.join(test_location, 'sn_hash')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 3524', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=10240)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='dhhash')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 6785', msg='The patched binary {} created from {} should have returned 6785, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 8708349528063474305 % 10240

    output = subprocess.check_output([patched_elf_file_path, 'ASDG']).strip()
    assert_equal(output, b'h(ASDG) = 2577', msg='The patched binary {} created from {} should have returned 8721, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 18372587535893977617 % 10240

    output = subprocess.check_output([patched_elf_file_path, '1234']).strip()
    assert_equal(output, b'h(1234) = 8556', msg='The patched binary {} created from {} should have returned 8556, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 8989378612277420396 % 10240

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 3433', msg='The patched binary {} created from {} should have returned 3433, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 4321438310141719913 % 10240

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 7258', msg='The patched binary {} created from {} should have returned 7258, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 17389275275998973018 % 10240

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 5093', msg='The patched binary {} created from {} should have returned 5093, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 12063272640347591653 % 10240

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 1797', msg='The patched binary {} created from {} should have returned 1797, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 11872575713699749637 % 10240

    shutil.rmtree(tempdir)

def test_univhash_sn():
    elf_file_name = os.path.join(test_location, 'sn_hash')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 3524', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=10240)
    hash_patch_asm_code = hpag.get_asm_code()

    patch_target_func = cfg.functions.function(name='dhhash')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(patch_target_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)


    output = subprocess.check_output([patched_elf_file_path, 'ASDF']).strip()
    assert_equal(output, b'h(ASDF) = 1128', msg='The patched binary {} created from {} should have returned 1128, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 1803756648 % 10240

    output = subprocess.check_output([patched_elf_file_path, 'asdf']).strip()
    assert_equal(output, b'h(asdf) = 4904', msg='The patched binary {} created from {} should have returned 4904, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 18446744067311078184 % 10240

    output = subprocess.check_output([patched_elf_file_path, 'aSdf']).strip()
    assert_equal(output, b'h(aSdf) = 3816', msg='The patched binary {} created from {} should have returned 3816, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 18446744069349902056 % 10240

    output = subprocess.check_output([patched_elf_file_path, '1234qwerty']).strip()
    assert_equal(output, b'h(1234qwerty) = 7491', msg='The patched binary {} created from {} should have returned 7491, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 18446744072716909891 % 10240

    output = subprocess.check_output([patched_elf_file_path, '1234qwertY']).strip()
    assert_equal(output, b'h(1234qwertY) = 6627', msg='The patched binary {} created from {} should have returned 6627, not {}'.format(patched_elf_file_path, elf_file_name, output)) # 18446744072095996387 % 10240

    shutil.rmtree(tempdir)


