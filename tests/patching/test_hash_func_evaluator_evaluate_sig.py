import os
from nose.tools import *
import tempfile
import shutil
import subprocess

import angr
import claripy

from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator
from hash_patcher.hash_func_evaluator import HashFuncEvaluator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_get_ext_mem_refs_bkdr_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'BKDRHash', 'sig1')

def test_get_ext_mem_refs_bkdr_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'BKDRHash', 'sig2')

def test_get_ext_mem_refs_dek_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DEKHash', 'sig1')

def test_get_ext_mem_refs_dek_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DEKHash', 'sig2')

def test_get_ext_mem_refs_pjw_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'PJWHash', 'sig1')

def test_get_ext_mem_refs_pjw_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'PJWHash', 'sig2')

def test_get_ext_mem_refs_rs_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'RSHash', 'sig1')

def test_get_ext_mem_refs_rs_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'RSHash', 'sig2')

def test_get_ext_mem_refs_js_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'JSHash', 'sig1')

def test_get_ext_mem_refs_js_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'JSHash', 'sig2')

def test_get_ext_mem_refs_sdbm_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'SDBMHash', 'sig1')

def test_get_ext_mem_refs_sdbm_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'SDBMHash', 'sig2')

def test_get_ext_mem_refs_djb_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DJBHash', 'sig1')

def test_get_ext_mem_refs_djb_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DJBHash', 'sig2')

def test_get_ext_mem_refs_elf_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'ELFHash', 'sig1')

def test_get_ext_mem_refs_elf_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'ELFHash', 'sig2')

def test_get_ext_mem_refs_ap_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'APHash', 'sig1')

def test_get_ext_mem_refs_ap_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'APHash', 'sig2')

def check_elf_and_hash(elf_file_path, hash_func_name, sig):
    elf_file_path = os.path.join(test_location, elf_file_path)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name=hash_func_name)

    hash_func_evaluator = HashFuncEvaluator(elf_file_path, hash_func.addr, proj=proj)

    if sig == 'sig1':
        assert_true(hash_func_evaluator.evaluate_sig1())
        assert_false(hash_func_evaluator.evaluate_sig2())

    elif sig == 'sig2':
        assert_true(hash_func_evaluator.evaluate_sig2())
        assert_false(hash_func_evaluator.evaluate_sig1())
    else:
        raise Exception("Unknown signature: {}".format(sig))
