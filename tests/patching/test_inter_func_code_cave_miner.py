import os
from nose.tools import *

import angr

from hash_patcher.interfunc_code_cave_miner import InterFuncCodeCaveMiner

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')

def test_inter_func_code_cave_miner():
    elf_file_name = os.path.join(test_location, 'inter_func_code_caves')
    proj = angr.Project(elf_file_name, auto_load_libs=False)


    ifccm = InterFuncCodeCaveMiner(elf_file_name)
    code_cave_graph = ifccm.get_code_cave_graph()

    check_code_cave(code_cave_graph, 0x401099, 7)
    check_code_cave(code_cave_graph, 0x4010d9, 7)
    check_code_cave(code_cave_graph, 0x401119, 7)
    check_code_cave(code_cave_graph, 0x401137, 9)
    check_code_cave(code_cave_graph, 0x40116c, 4)
    check_code_cave(code_cave_graph, 0x401186, 10)
    check_code_cave(code_cave_graph, 0x4011ed, 3)


def check_code_cave(code_cave_graph, code_cave_addr, expected_code_cave_size):
    assert_true(code_cave_addr in code_cave_graph.nodes, msg="We expected a code cave at addr: 0x{:x}".format(code_cave_addr))
    code_cave = code_cave_graph.nodes[code_cave_addr]
    code_cave_size = code_cave['size']
    assert_equals(code_cave_size, expected_code_cave_size, msg="Code cave at addr 0x{:x} to have size {}, not {}.".format(code_cave_addr, expected_code_cave_size, code_cave_size))
    

