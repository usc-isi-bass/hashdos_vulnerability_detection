import os
from nose.tools import *
import tempfile
import shutil
import subprocess

import angr

from hash_patcher.hash_func_runner import HashFuncRunner
from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_conc_siphash_case_insensitive_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()
    hash_func = cfg.functions.function(name='patch_target_func')


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)


    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)
    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 2506759691, msg='The patched hash function at 0x{:x} in {} should have returned 2506759691, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 2506759691, msg='The patched hash function at 0x{:x} in {} should have returned 2506759691, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)


def test_conc_siphash_case_insensitive_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()
    hash_func = cfg.functions.function(name='patch_target_func')


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)
    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 2506759691, msg='The patched hash function at 0x{:x} in {} should have returned 2506759691, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 2506759691, msg='The patched hash function at 0x{:x} in {} should have returned 2506759691, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_conc_siphash_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)

    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 1120073065, msg='The patched hash function 0x{:x} in {} should have returned 1120073065, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 795266138, msg='The patched hash function 0x{:x} in {} should have returned 795266138, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 1822118885, msg='The patched hash function at 0x{:x} in {} should have returned 1822118885, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 1073798917, msg='The patched hash function at 0x{:x} in {} should have returned 1073798917, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_conc_siphash_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)

    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 1120073065, msg='The patched hash function 0x{:x} in {} should have returned 1120073065, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 795266138, msg='The patched hash function 0x{:x} in {} should have returned 795266138, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 3358194305, msg='The patched hash function 0x{:x} in {} should have returned 3358194305, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 1822118885, msg='The patched hash function at 0x{:x} in {} should have returned 1822118885, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 1073798917, msg='The patched hash function at 0x{:x} in {} should have returned 1073798917, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)
    

def test_conc_univhash_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)

    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 2191461160, msg='The patched hash function 0x{:x} in {} should have returned 2191461160, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 4230285032, msg='The patched hash function 0x{:x} in {} should have returned 4230285032, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 3302325571, msg='The patched hash function at 0x{:x} in {} should have returned 3302325571, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 2681412067, msg='The patched hash function at 0x{:x} in {} should have returned 2681412067, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_conc_univhash_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)

    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 2191461160, msg='The patched hash function 0x{:x} in {} should have returned 2191461160, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 4230285032, msg='The patched hash function 0x{:x} in {} should have returned 4230285032, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 3302325571, msg='The patched hash function at 0x{:x} in {} should have returned 3302325571, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 2681412067, msg='The patched hash function at 0x{:x} in {} should have returned 2681412067, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_conc_univhash_case_insensitive_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)
    
    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 1377037283, msg='The patched hash function at 0x{:x} in {} should have returned 1377037283, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 1377037283, msg='The patched hash function at 0x{:x} in {} should have returned 1377037283, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

def test_conc_univhash_case_insensitive_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    hash_func_runner = HashFuncRunner(patched_elf_file_path, hash_func.addr)

    output = hash_func_runner.run_conc('asdf')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('aSdf')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('ASDF')
    assert_equal(output, 1803756648, msg='The patched hash function 0x{:x} in {} should have returned 1803756648, not {}'.format(hash_func.addr, patched_elf_file_path, output))

    output = hash_func_runner.run_conc('1234qwerty')
    assert_equal(output, 1377037283, msg='The patched hash function at 0x{:x} in {} should have returned 1377037283, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    output = hash_func_runner.run_conc('1234qwertY')
    assert_equal(output, 1377037283, msg='The patched hash function at 0x{:x} in {} should have returned 1377037283, not {}'.format(hash_func.addr, patched_elf_file_path, elf_file_name, output))

    shutil.rmtree(tempdir)

