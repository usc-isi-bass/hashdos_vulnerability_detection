import os
from nose.tools import *
import tempfile
import shutil
import subprocess

import angr
import claripy

from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_evaluator import HashPatchEvaluator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_evaluate_symb_ret_bkdr_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'BKDRHash', 'sig1')

def test_evaluate_symb_ret_bkdr_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'BKDRHash', 'sig2')

def test_evaluate_symb_ret_dek_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DEKHash', 'sig1')

def test_evaluate_symb_ret_dek_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DEKHash', 'sig2')

def test_evaluate_symb_ret_pjw_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'PJWHash', 'sig1')

def test_evaluate_symb_ret_pjw_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'PJWHash', 'sig2')

def test_evaluate_symb_ret_rs_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'RSHash', 'sig1')

def test_evaluate_symb_ret_rs_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'RSHash', 'sig2')

def test_evaluate_symb_ret_js_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'JSHash', 'sig1')

def test_evaluate_symb_ret_js_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'JSHash', 'sig2')

def test_evaluate_symb_ret_sdbm_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'SDBMHash', 'sig1')

def test_evaluate_symb_ret_sdbm_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'SDBMHash', 'sig2')

def test_evaluate_symb_ret_djb_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'DJBHash', 'sig1')

def test_evaluate_symb_ret_djb_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'DJBHash', 'sig2')

def test_evaluate_symb_ret_elf_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'ELFHash', 'sig1')

def test_evaluate_symb_ret_elf_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'ELFHash', 'sig2')

def test_evaluate_symb_ret_ap_sig1():
    check_elf_and_hash('hash_funcs_sig1', 'APHash', 'sig1')

def test_evaluate_symb_ret_ap_sig2():
    check_elf_and_hash('hash_funcs_sig2', 'APHash', 'sig2')

def test_evaluate_symb_ret_bip_sig2():
    check_elf_and_hash('bip_hash', 'hash_func', 'sig2')

def test_evaluate_symb_ret_sn_sig2():
    check_elf_and_hash('sn_hash', 'dhhash', 'sig2')

def check_elf_and_hash(elf_file_path, hash_func_name, sig):
    elf_file_path = os.path.join(test_location, elf_file_path)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name=hash_func_name)
    hash_patch_evaluator = HashPatchEvaluator(elf_file_path, hash_func.addr, sig, vuln_proj=proj)

    irregularities = hash_patch_evaluator.check_symb_ret(['a', 'aa'])
    assert_equal(len(irregularities), 0, msg="We were not expecting irregularities, but got: {}".format(irregularities))


def test_evaluate_symb_ret_irregular_hash_func_ext_memread_sig1():
    check_elf_and_hash_irregularity('irregular_hash_func_ext_memread_sig1', 'irr_hash', 'sig1', 'symbolicret')

def test_evaluate_symb_ret_irregular_hash_func_ext_memread_sig2():
    check_elf_and_hash_irregularity('irregular_hash_func_ext_memread_sig2', 'irr_hash', 'sig2', 'symbolicret')

def check_elf_and_hash_irregularity(elf_file_path, hash_func_name, sig, irregularity_type):
    elf_file_path = os.path.join(test_location, elf_file_path)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name=hash_func_name)
    hash_patch_evaluator = HashPatchEvaluator(elf_file_path, hash_func.addr, sig, vuln_proj=proj)
    irregularities = hash_patch_evaluator.check_symb_ret(['a', 'aa'])
    assert_not_equal(len(irregularities), 0, msg="We were expecting an irregulary of type {} for elf {} and hash {}, but found nothing".format(elf_file_path, hash_func_name, irregularity_type))
    for irregularity in irregularities:
            assert_equal(irregularity.irregularity_type, irregularity_type, msg="We were expecting irregularity of type {} buf found {}".format(irregularity_type, irregularity.irregularity_type))
