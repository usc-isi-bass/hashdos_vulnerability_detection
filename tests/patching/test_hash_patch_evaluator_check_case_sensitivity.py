import os
from nose.tools import *
import tempfile
import shutil
import subprocess

import angr
import claripy

from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator
from hash_patcher.hash_patch_evaluator import HashPatchEvaluator

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_check_case_sensitivity_bkdr_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'BKDRHash', 'sig1', True)

def test_check_case_sensitivity_bkdr_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'BKDRHash', 'sig2', True)

def test_check_case_sensitivity_dek_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'DEKHash', 'sig1', True)

def test_check_case_sensitivity_dek_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'DEKHash', 'sig2', True)

def test_check_case_sensitivity_pjw_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'PJWHash', 'sig1', True)

def test_check_case_sensitivity_pjw_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'PJWHash', 'sig2', True)

def test_check_case_sensitivity_rs_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'RSHash', 'sig1', True)

def test_check_case_sensitivity_rs_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'RSHash', 'sig2', True)

def test_check_case_sensitivity_js_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'JSHash', 'sig1', True)

def test_check_case_sensitivity_js_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'JSHash', 'sig2', True)

def test_check_case_sensitivity_sdbm_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'SDBMHash', 'sig1', True)

def test_check_case_sensitivity_sdbm_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'SDBMHash', 'sig2', True)

def test_check_case_sensitivity_djb_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'DJBHash', 'sig1', True)

def test_check_case_sensitivity_djb_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'DJBHash', 'sig2', True)

def test_check_case_sensitivity_elf_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'ELFHash', 'sig1', True)

def test_check_case_sensitivity_elf_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'ELFHash', 'sig2', True)

def test_check_case_sensitivity_ap_sig1():
    check_elf_and_hash('hash_funcs_sig1', None, 'APHash', 'sig1', True)

def test_check_case_sensitivity_ap_sig2():
    check_elf_and_hash('hash_funcs_sig2', None, 'APHash', 'sig2', True)

def test_check_case_sensitivity_siphash_case_insensitive_sig1():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()
    hash_func = cfg.functions.function(name='patch_target_func')


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig1', False)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_siphash_case_insensitive_sig2():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()
    hash_func = cfg.functions.function(name='patch_target_func')


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig2', False)


    shutil.rmtree(tempdir)

def test_check_case_sensitivity_siphash_sig1():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig1', True)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_siphash_sig2():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'sip_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig2', True)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_univhash_sig1():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig1', True)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_univhash_sig2():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()



    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig2', True)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_univhash_case_insensitive_sig1():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig1', False)

    shutil.rmtree(tempdir)

def test_check_case_sensitivity_univhash_case_insensitive_sig2():
    elf_file_path = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_path, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_path))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_path + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func_case_insensitive.s')
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_path)
    patch_success = patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    assert_true(patch_success, msg="Could not add patch to code")
    assert_true(patch_success, msg="Could not add patch to code")
    patcher.apply_patches(patched_elf_file_path)

    check_elf_and_hash(elf_file_path, patched_elf_file_path, 'patch_target_func', 'sig2', False)

    shutil.rmtree(tempdir)



def check_elf_and_hash(elf_file_path, patch_file_path, hash_func_name, sig, is_case_sensitive):
    elf_file_path = os.path.join(test_location, elf_file_path)
    proj = angr.Project(elf_file_path, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name=hash_func_name)

    hash_patch_evaluator = HashPatchEvaluator(elf_file_path, hash_func.addr, sig, vuln_proj=proj)

    conc_bufs = ['aB', '1Ac']
    original_case_sensitive = hash_patch_evaluator.check_case_sensitivity(conc_bufs, check_original=True)


    # TODO Update to patch real hash functions and then test both original and replacement
    if patch_file_path is None:
        if is_case_sensitive:
            assert_true(original_case_sensitive, msg="Original was supposed to be case sensitive")
        else:
            assert_false(original_case_sensitive, msg="Original was not supposed to be case sensitive")
    else:
        hash_patch_evaluator.set_patch(patch_file_path)
        patch_case_sensitive = hash_patch_evaluator.check_case_sensitivity(conc_bufs, check_original=False)
        if is_case_sensitive:
            assert_true(patch_case_sensitive, msg="Patch was supposed to be case sensitive")
        else:
            assert_false(patch_case_sensitive, msg="Patch was not supposed to be case sensitive")

