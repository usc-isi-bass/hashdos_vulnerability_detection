import os
from nose.tools import *
import tempfile
import shutil
import subprocess
import logging

import angr
import claripy

from hash_patcher.hash_func_runner import HashFuncRunnerSig1,HashFuncRunnerSig2
from hash_patcher.static_patcher import StaticPatcher
from hash_patcher.hash_patch_asm_generator import HashPatchAsmGenerator

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)
logging.getLogger('claripy.balancer').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('archinfo.arch').setLevel(logging.CRITICAL)



import util.angr_util as angr_util

test_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'test_binaries')
test_data_location = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'hash_patches')

def test_symb_bkdr_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='BKDRHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 15528) # hash val for vF
    assert_true(sat)

def test_symb_bkdr_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='BKDRHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 15528) # hash val for vF
    assert_true(sat)

def test_symb_dek_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='DEKHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1670) # hash val for vF
    assert_true(sat)

def test_symb_dek_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='DEKHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1670) # hash val for vF
    assert_true(sat)


def test_symb_pjw_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='PJWHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1958) # hash val for vF
    assert_true(sat)

def test_symb_pjw_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='PJWHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1958) # hash val for vF
    assert_true(sat)


def test_symb_rs_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='RSHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1656737520) # hash val for vF
    assert_true(sat)

def test_symb_rs_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='RSHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1656737520) # hash val for vF
    assert_true(sat)


def test_symb_js_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='JSHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 2762492676) # hash val for vF
    assert_true(sat)

def test_symb_js_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='JSHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 2762492676) # hash val for vF
    assert_true(sat)


def test_symb_sdbm_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='SDBMHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 7740752) # hash val for vF
    assert_true(sat)

def test_symb_sdbm_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='SDBMHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 7740752) # hash val for vF
    assert_true(sat)


def test_symb_djb_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='DJBHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 5863873) # hash val for vF
    assert_true(sat)

def test_symb_djb_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='DJBHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 5863873) # hash val for vF
    assert_true(sat)



def test_symb_elf_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='ELFHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1958) # hash val for vF
    assert_true(sat)

def test_symb_elf_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='ELFHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 1958) # hash val for vF
    assert_true(sat)


def test_symb_ap_sig1():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig1')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='APHash')

    hash_func_runner = HashFuncRunnerSig1(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 2214338665) # hash val for vF
    assert_true(sat)

def test_symb_ap_sig2():
    elf_file_name = os.path.join(test_location, 'hash_funcs_sig2')
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()

    hash_func = cfg.functions.function(name='APHash')

    hash_func_runner = HashFuncRunnerSig2(elf_file_name, hash_func.addr, proj=proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(2)

    sat = check_sat(proj, ret_states, 2214338665) # hash val for vF
    assert_true(sat)


def test_symb_univhash_sig1():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig1_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    random_vals = {'rval1': 0x4078601, 'rval2': 0x42021}
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, random_vals=random_vals, buf_in_reg='rdi', len_in_reg='rsi', out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)

    patched_proj = angr.Project(patched_elf_file_path, auto_load_libs=False)
    hash_func_runner = HashFuncRunnerSig1(patched_elf_file_path, hash_func.addr, proj=patched_proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(4)
    sat = check_sat(patched_proj, ret_states, 2191461160) # hash val for asdf
    assert_true(sat)

    shutil.rmtree(tempdir)

def test_symb_univhash_sig2():
    elf_file_name = os.path.join(test_location, 'ret_hash_sig2_expanded')
    output = subprocess.check_output([elf_file_name, 'a']).strip()
    assert_equal(output, b'h(a) = 0', msg='The test binary {} did not output as expected. It\'s probably broken.'.format(elf_file_name))

    tempdir = tempfile.mkdtemp(prefix="bin_patch_test_")
    patched_elf_file = os.path.basename(elf_file_name + '_patched')
    patched_elf_file_path = os.path.join(tempdir, patched_elf_file)
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg = proj.analyses.CFGFast()


    patch_asm_code_file = os.path.join(test_data_location, 'univ_hash_func.s')
    random_vals = {'rval1': 0x4078601, 'rval2': 0x42021}
    hpag = HashPatchAsmGenerator(proj, asm_file=patch_asm_code_file, random_vals=random_vals, buf_in_reg='rdi', len_in_reg=None, out_mod=2**32)
    hash_patch_asm_code = hpag.get_asm_code()

    hash_func = cfg.functions.function(name='patch_target_func')
    patcher = StaticPatcher(elf_file_name)
    patcher.hook_func(hash_func.addr, hash_patch_asm_code, patch_call_sites=False, patch_orig_func=True)
    patcher.apply_patches(patched_elf_file_path)


    patched_proj = angr.Project(patched_elf_file_path, auto_load_libs=False)
    hash_func_runner = HashFuncRunnerSig2(patched_elf_file_path, hash_func.addr, proj=patched_proj)
    symbstr_addr, symbstr, ret_states = hash_func_runner.run_symb(4)
    sat = check_sat(patched_proj, ret_states, 2191461160) # hash val for asdf
    assert_true(sat)

    shutil.rmtree(tempdir)


def check_sat(proj, ret_states, hash_val):
    solver = claripy.Solver()

    ret_states_constraints = False
    # Constrain the return value of all return states to == hash_val
    for ret_state in ret_states:
        print('ret state: {} insn: 0x{:x}'.format(ret_state, ret_state.scratch.ins_addr))
        print(list(ret_state.history.lineage))
        print("ret_state constraints: {}".format(ret_state.solver.constraints))
        ret_reg = angr_util.get_ret_reg(proj, ret_state)
        print("ret reg: {}".format(ret_reg))
        ret_state_constraints = claripy.And(ret_reg == hash_val, *ret_state.solver.constraints)
        ret_states_constraints = claripy.Or(ret_state_constraints, ret_states_constraints)
    solver.add(ret_states_constraints)
    print(solver.constraints)
    # Given that we know we can get this hash value the constraints are satisfiable
    sat = solver.check_satisfiability()
    print(sat)
    return sat == 'SAT'


