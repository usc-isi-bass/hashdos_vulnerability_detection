import os
import sys
import time
import datetime
import argparse
import angr
import logging
import binascii

# Because apparently python only adds the parent directory of the running script to the PATH.
# We want the parent of the parent to be added, because that's where input_dependence ans hash_table_discovery is
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from hash_patcher.interfunc_code_cave_miner import InterFuncCodeCaveMiner
from hash_patcher.code_cave_graph_patch_creator import CodeCaveGraphPatchCreator
from hash_patcher.patcher import Patcher
import hash_patcher.binary_code_utils as bcu

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--elf_file', help='the elf file to patch', required=True)
    parser.add_argument('--patch_target', help='the name of the function to replace with a trampoline.', required=True)
    args = parser.parse_args()
    elf_file_name = args.elf_file
    patch_target_func_name = args.patch_target
    #print(patch_target_addr)

    #print("Elf file: {}".format(elf_file_name))
    proj = angr.Project(elf_file_name, auto_load_libs=False)
    cfg_fast = proj.analyses.CFGFast()
    patch_target_func = cfg_fast.functions.function(name=patch_target_func_name)
    if patch_target_func is None:
        raise Exception("Could not find function: {}".format(patch_target_func_name))

    ifccm = InterFuncCodeCaveMiner(elf_file_name)
    code_cave_graph = ifccm.get_code_cave_graph()
    print(ifccm._extract_metrics())
    ccgpc = CodeCaveGraphPatchCreator(code_cave_graph)
    patch_target_call_ret_site_pairs = get_call_ret_site_pairs_for(cfg_fast, patch_target_func)
    for call_site, ret_site in patch_target_call_ret_site_pairs:
        call_site_block = proj.factory.block(call_site)
        call_insn_addr = call_site_block.instruction_addrs[-1]
        call_insn = None
        for insn in call_site_block.capstone.insns:
            if insn.address == call_insn_addr:
                call_insn = insn
        assert call_insn is not None, "Could not find the call instruction"
        print("Patching call \"{}\" at addr: 0x{:x}, ret to: 0x{:x}".format(call_insn, call_insn_addr, ret_site))
        code_cave_addr, addr_to_patch_bin_insns_map = ccgpc.fit(call_insn, ['label1: mov eax, 1', 'mov eax, 2', 'jmp label1'], ret_site)
        print("Code cave addr: {}".format(code_cave_addr))
        jump_patch_addr = call_insn_addr
        jump_patch_offset = code_cave_addr - call_insn_addr
        jump_patch_bytes = bcu.create_jump('jmp', jump_patch_offset)
        if len(jump_patch_bytes) < len(call_insn.bytes):
            jump_patch_bytes = jump_patch_bytes + b'\x90' * (len(call_insn.bytes) - len(jump_patch_bytes))
        assert len(jump_patch_bytes) == len(call_insn.bytes)
        ptcher = Patcher(proj)
        ptcher.add_patch(jump_patch_addr, jump_patch_bytes)
        for addr in addr_to_patch_bin_insns_map:
            print("0x{:x} : {}".format(addr, binascii.hexlify(addr_to_patch_bin_insns_map[addr])))
            patch_bin_insns = addr_to_patch_bin_insns_map[addr]
            ptcher.add_patch(addr, patch_bin_insns)
        patched_elf_name = elf_file_name + "_patched"
        ptcher.apply_patches(patched_elf_name)
        print("Patched elf file: {}".format(patched_elf_name))
        for addr in addr_to_patch_bin_insns_map:
            bin_insns = addr_to_patch_bin_insns_map[addr]
            print("0x{:x} : {}".format(addr, binascii.hexlify(bin_insns)))


# Finds the call sites to the function target_func
def get_call_ret_site_pairs_for(cfg, target_func):
    call_ret_sites = []
    for caller_func in cfg.functions.values():
        for call_site in caller_func.get_call_sites():
            call_target = caller_func.get_call_target(call_site)
            callee_func = cfg.functions[call_target]
            if call_target == target_func.addr:
                ret_site = caller_func.get_call_return(call_site)
                call_ret_sites.append((call_site, ret_site))
    return call_ret_sites           
 

if __name__ == "__main__":
    main()


