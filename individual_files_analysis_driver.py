import os
import time
import datetime
import argparse
import angr
import logging

import analyses
import hash_func_search

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('archinfo').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)

l = logging.getLogger(name=__name__)
l.setLevel('DEBUG')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--files', nargs='+', help='the list of files to analyze', required=True)
    args = parser.parse_args()
    files = args.files
    analyze = analyses.analyze3
    #analyze = analyses.analyze4
    get_hash_funcs = hash_func_search.get_glibc_hash_func
    #get_hash_funcs = hash_func_search.get_stashed_hash_funcs
    run_analysis(file_names=files, analyze=analyze, get_hash_funcs=get_hash_funcs)

def run_analysis(file_names, analyze, get_hash_funcs):
    for file_name in file_names:
        result_dict = analyze(file_name, get_hash_funcs)
    print(result_dict)

if __name__ == "__main__":
    main()
