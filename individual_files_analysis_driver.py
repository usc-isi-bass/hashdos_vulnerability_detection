import os
import time
import datetime
import argparse
import angr
import logging

import input_dependence_analyses
import hash_func_use_context_analyses
import hash_func_search

logging.getLogger('angr').setLevel(logging.CRITICAL)
logging.getLogger('cle').setLevel(logging.CRITICAL)
logging.getLogger('archinfo').setLevel(logging.CRITICAL)
logging.getLogger('pyvex').setLevel(logging.CRITICAL)
logging.getLogger('pyvex.lifting.libvex').setLevel(logging.CRITICAL)
logging.getLogger('claripy').setLevel(logging.CRITICAL)

l = logging.getLogger(name=__name__)
l.setLevel('DEBUG')

TIME_FORMAT = "%H:%M:%S, %9A, %d-%m-%Y"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--files', nargs='+', help='the list of files to analyze', required=True)
    args = parser.parse_args()
    files = args.files
    #analyze = input_dependence_analyses.analyze3
    #analyze = input_dependence_analyses.analyze4
    #get_hash_funcs = hash_func_search.get_glibc_hash_func
    #get_hash_funcs = hash_func_search.get_stashed_hash_funcs
    #analyze = input_dependence_analyses.intermediate_static_analysis
    analyze = hash_func_use_context_analyses.analyze
    get_hash_funcs = hash_func_search.get_stashed_hash_funcs
    global_start_time = time.localtime()
    print("Analysis started on: {}".format(time.strftime(TIME_FORMAT, global_start_time)))


    run_analysis(file_names=files, analyze=analyze, get_hash_funcs=get_hash_funcs)

    global_end_time = time.localtime()
    global_run_time = format_time_delta(global_start_time, global_end_time)
    print("Finished: {}".format(time.strftime(TIME_FORMAT, global_end_time)))
    print("Total time: {}".format(global_run_time))



def run_analysis(file_names, analyze, get_hash_funcs):
    for file_name in file_names:
        result_dict = analyze(file_name, get_hash_funcs)
    print(result_dict)

def format_time_delta(start_time, end_time, short=False):
        start_time_datetime = datetime.datetime.fromtimestamp(time.mktime(start_time))
        end_time_datetime = datetime.datetime.fromtimestamp(time.mktime(end_time))
        time_delta_datetime = end_time_datetime - start_time_datetime
        seconds = int(time_delta_datetime.seconds)
        days, seconds = divmod(seconds, 86400)
        hours, seconds = divmod(seconds, 3600)
        minutes, seconds = divmod(seconds, 60)
        if short:
                return "{0}:{1:02d}:{2:02d}:{3:02d}".format(days, hours, minutes, seconds)
        else:
                return "{0} days, {1} hours, {2:02d} minutes and {3:02d} seconds.".format(days, hours, minutes, seconds)


if __name__ == "__main__":
    main()
